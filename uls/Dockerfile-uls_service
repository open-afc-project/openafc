#
# Copyright (C) 2021 Broadcom. All rights reserved. The term "Broadcom"
# refers solely to the Broadcom Inc. corporate affiliate that owns
# the software below. This work is licensed under the OpenAFC Project License,
# a copy of which is included with this software program
#
FROM alpine:3.18.11
# This variable should be set to default Python version for chosen Alpine
# version. Unfortunately there is no way to get it automagically
ENV PYTHONVERSION=3.11

# DOWNLOADER SERVICE PARAMETERS

# Where to directory with ULS databases is mapped
ENV ULS_EXT_DB_DIR=/

# Symlink that points to recent ULS database. May include path, that is used to
# override fsDatabaseFile in AFC Config
ENV ULS_CURRENT_DB_SYMLINK=rat_transfer/ULS_Database/FS_LATEST.sqlite3

# Name of RAS database (as mapped from external storage)
ENV ULS_EXT_RAS_DATABASE=/rat_transfer/RAS_Database/RASdatabase.dat

# File name from where daily_uls_parse.py reads RAS database
# ENV ULS_RAS_DATABASE

# YES to run downloader script on nice (lowered) priority, NO to use normal
# priority (this is default)
ENV ULS_NICE=YES

# Download script
# ENV ULS_DOWNLOAD_SCRIPT

# Additional arguments (besides --region) to pass to daily_uls_parse.py
# ENV ULS_DOWNLOAD_SCRIPT_ARGS

# Colon separated list of regions to download. Default - all of them
# ENV ULS_DOWNLOAD_REGION

# Directory where script puts downloaded database
# ENV ULS_RESULT_DIR

# Directory where download script puts temporary files
# ENV ULS_TEMP_DIR

# FSID file location used by daily_uls_parse.py
# ENV ULS_FSID_FILE

# Connection string to service state database
# ENV ULS_SERVICE_STATE_DB_DSN

# Optional name of file with password for state database DSN
# ENV ULS_SERVICE_STATE_DB_PASSWORD_FILE

# REST API URL for Postgres database creation
ENV AFC_DB_CREATOR_URL=http://rat_server/fbrat/admin/CreateDb

# Alembic parameters
ENV ULS_ALEMBIC_CONFIG=/wd/migrations/alembic.ini

# Initial Alembic version of state database (used to stamp existing alembicless
# database)
ENV ULS_ALEMBIC_INITIAL_VERSION=b41cf8a00430

# current Alembic version of state database (used to stamp newly created
# database). Default is 'head'
# ENV ULS_ALEMBIC_HEAD_VERSION

# Prometheus port to serve metrics on. Prometheus metrics (if used) are only
# meaningful in continuous (not run-once) operation
# ENV ULS_PROMETHEUS_PORT

# HOST[PORT] of StatsD server to send metrics to. StatsD operation may be used
# in run-once mode of operation
# ENV ULS_STATSD_SERVER

# External files to check: BASE_URL1:SUBDIR1:FILENAME[,FILENAME...];BASE_URL2...
# ENV ULS_CHECK_EXT_FILES

# Delay first download by given number of hours
# ENV ULS_DELAY_HR

# Download interval in hours
# ENV ULS_INTERVAL_HR

# Maximum allowed change since previous download in percents
# ENV ULS_MAX_CHANGE_PERCENT

# URL to use for testing new ULS database against AFC Service
# ENV ULS_AFC_URL

# Number of parallel AFC Requests to make during new ULS database verification
# Default see config file of uls_afc.py
# ENV ULS_AFC_PARALLEL

# Download maximum duration in hours
# ENV ULS_TIMEOUT_HR

# YES to run download once, NO to run periodically (this is default)
# ENV ULS_RUN_ONCE

# True if Rcache enabled, False if not
# ENV RCACHE_ENABLED

# URL of Rcache service
# ENV RCACHE_SERVICE_URL

# HEALTHCHECKER PARAMETERS
# Variables starting with ULS_HEALTH_ related to pronounce service healthy or
# unhealthy
# Variables starting with ULS_ALARM_ related to email sending.
# For all variables it's OK to be empty/unspecified

# Pronounce service unhealthy if no download attempt was made for this number
# of hours. Default defined in uls_service.py (6 hours as of time of this
# writing)
# ENV ULS_HEALTH_ATTEMPT_MAX_AGE_HR

# Pronounce service unhealthy if no download succeeded for this number
# of hours. Default defined in uls_service.py (8 hours as of time of this
# writing)
# ENV ULS_HEALTH_SUCCESS_MAX_AGE_HR

# Pronounce service unhealthy if ULS data had not changed for this number of
# hours. Default defined in uls_service.py (40 hours as of time of this
# writing)
# ENV ULS_HEALTH_UPDATE_MAX_AGE_HR

# SMTP server. If unspecified no alarm/beacon emails will be sent
# ENV ULS_SMTP_SERVER

# Port to use on SMTP server
# ENV ULS_SMTP_PORT

# Login name for SMTP server. If unspecified no alarm/beacon emails will be
# sent
# ENV ULS_SMTP_USERNAME

# File with password for SMTP servern (ignored if empty or absent)
# ENV ULS_SMTP_PASSWORD_FILE

# Use SSL with SMTP server
# ENV ULS_SMTP_SSL

# Use TLS with SMTP server
# ENV ULS_SMTP_TLS

# Name of JSON secret with SMTP parameters (formatted as per
# NOTIFIER_MAIL.json). If not specified no emails will be sent
# ENV ULS_ALARM_SMTP_INFO

# Email to send messages to. If not specified no emails will be sent
# ENV ULS_ALARM_EMAIL_TO
#
# Email to send beacon information messages to. If not specified alarm email
# will be used
# ENV ULS_BEACON_EMAIL_TO

# Minimum interval (in hours) of alarm message (message on something that went
# wrong) sending. If not specified no alarm emails will be sent
# ENV ULS_ALARM_ALARM_INTERVAL_HR

# Minimum interval (in hours) of beacon message (message on current status, be
# it good or bad) sending. If not specified no beacon emails will be sent
# ENV ULS_ALARM_BEACON_INTERVAL_HR

# Send alarm email if last download attempt is older than this number of
# hours. If not specified last attempt time will not trigger alarm email
# sending
# ENV ULS_ALARM_ATTEMPT_MAX_AGE_HR

# Send alarm email if last download success is older than this number of
# hours. If not specified last download success time will not trigger alarm
# email sending
# ENV ULS_ALARM_SUCCESS_MAX_AGE_HR

# Send alarm email if region's ULS (FS) data was not changed for more than
# given number of hours.
# Format is REG1:HOURS1,REG2:HOURS2... where REG... is region code (US, CA, BR
# as of time of this writing).
# If not specified, data age will not trigger alarm email sending
# ENV ULS_ALARM_REG_UPD_MAX_AGE_HR

# Optional note of where from is email. If specified - used as part of email
# message body
# ENV ULS_ALARM_SENDER_LOCATION

# ALS client parameters (see arg_dscs in als.py)
# ENV ALS_KAFKA_SERVER_ID
# ENV ALS_KAFKA_CLIENT_BOOTSTRAP_SERVERS
# ENV ALS_KAFKA_MAX_REQUEST_SIZE

RUN apk add --update --no-cache python3=~${PYTHONVERSION} \
    boost1.82-program_options boost1.82-log boost1.82-filesystem \
    boost1.82-thread armadillo minizip qt5-qtbase-sqlite libbsd

# Setting up venv in /venv and 'activating' it
RUN python3 -m venv /venv
ENV PATH=/venv/bin:$PATH
ENV VIRTUAL_ENV=/venv
# This explicitly set variable and its forceful injection in some places helps
# to alleviate various venv shortcomings
ENV PYTHONPATH=/venv/lib/python${PYTHONVERSION}/site-packages:/usr/lib/python${PYTHONVERSION}/site-packages:${PYTHONPATH}

# Installing Python libraries
RUN apk add --update --no-cache librdkafka-dev=~2.1.1
COPY uls/requirements.txt /wd/
RUN apk add --update --no-cache python3-dev=~${PYTHONVERSION} gcc g++ musl-dev make expat expat-dev && \
    pip3 install --no-cache-dir -r /wd/requirements.txt && \
    apk del --purge python3-dev gcc g++ musl-dev make expat-dev && \
    rm -f /wd/requirements.txt

# Building ulsprocessor
ARG BUILDREV=localbuild
COPY CMakeLists.txt LICENSE.txt version.txt Doxyfile.in /build/afc/
COPY cmake /build/afc/cmake/
COPY pkg /build/afc/pkg/
COPY selinux /build/afc/selinux/
COPY src /build/afc/src/

RUN mkdir -p /mnt/nfs/rat_transfer/daily_uls_parse/data_files \
            /mnt/nfs/rat_transfer/daily_uls_parse/temp \
            /mnt/nfs/rat_transfer/ULS_Database \
            /mnt/nfs/rat_transfer/Antenna_Patterns \
            /output_folder

RUN mkdir -p -m 777 /build/afc/build
RUN cd /build/afc/build && \
    apk add build-base cmake samurai boost-dev \
        qt5-qtbase-dev armadillo-dev minizip-dev libbsd-dev && \
    cmake -DCMAKE_INSTALL_PREFIX=/build/afc/__install \
        -DCMAKE_BUILD_TYPE=Ulsprocessor -DSVN_LAST_REVISION=$BUILDREV \
        -G Ninja /build/afc && \
    env PYTHONPATH=${PYTHONPATH} \
        ninja -j$(nproc --all --ignore=2) install && \
    mv /build/afc/__install/bin/* /mnt/nfs/rat_transfer/daily_uls_parse/ && \
    mv /build/afc/build/src/ratapi/pkg/ratapi/db/* /mnt/nfs/rat_transfer/daily_uls_parse/ && \
    apk del --purge build-base cmake samurai boost-dev \
        qt5-qtbase-dev armadillo-dev minizip-dev libbsd-dev && \
    cd / && rm -rf /build

COPY src/afc-packages /wd/afc-packages
RUN pip3 install --use-pep517 --root-user-action=ignore \
        -r /wd/afc-packages/pkgs.uls \
    && rm -rf /wd/afc-packages
    
COPY uls/uls_service*.py uls/fsid_tool.py uls/fs_db_diff.py uls/fs_afc.py \
    uls/fs_afc.yaml /wd/
RUN chmod -x /wd/*.py
RUN chmod +x /wd/uls_service.py /wd/uls_service_healthcheck.py \
    /wd/fsid_tool.py /wd/fs_db_diff.py /wd/fs_afc.py

COPY uls/migrations /wd/migrations/

WORKDIR /wd

ENTRYPOINT /wd/uls_service.py

HEALTHCHECK --interval=2h --timeout=2m --retries=3 \
    CMD /wd/uls_service_healthcheck.py || exit 1
