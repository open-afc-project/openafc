apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "afc-int.fullname" . }}-worker
  labels:
    {{- include "afc-int.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount.worker }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "afc-int.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "afc-int.selectorLabels" . | nindent 8 }}
        afc: worker
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "afc-int.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.worker.repository }}:{{ .Values.image.worker.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.worker.pullPolicy }}
          # livenessProbe:
          #   httpGet:
          #     path: /
          #     port: rmqp
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: rmqp
          volumeMounts:
            - mountPath: {{ .Values.deployments.global.mountPath | quote }}
              name: cont-confs
          env:
            # Filestorage params:
            - name: AFC_OBJST_HOST
              value: {{ .Values.service.objst.loadBalancerIP }}
            - name: AFC_OBJST_PORT
              value: {{ .Values.service.objst.fileStoragePort | quote }}
            - name: AFC_OBJST_SCHEME
              value: {{ .Values.service.objst.scheme | quote }}
            # celery params
            - name: AFC_WORKER_CELERY_OPTS
              value: "rat_worker"
            # RabbitMQ server name:
            - name: BROKER_TYPE
              value: "external"
            - name: BROKER_FQDN
              value: {{ .Values.service.rmq.loadBalancerIP }}
            # afc-engine preload lib params
            - name: AFC_AEP_ENABLE
              value: {{ .Values.deployments.worker.afc_aep_enable | quote }}
            - name: AFC_AEP_DEBUG
              value: {{ .Values.deployments.worker.afc_aep_debug | quote }}
            - name: AFC_AEP_REAL_MOUNTPOINT
              value: "{{ .Values.deployments.global.mountPath }}/{{ .Values.deployments.worker.afc_aep_real_mountpoint_relative}}"
            # Rcache parameters
            - name: RCACHE_ENABLED
              value: {{ .Values.service.rcache.is_enabled | quote }}
            - name: RCACHE_SERVICE_URL
              value: "http://{{ include "afc-int.fullname" . }}-rcache:{{ .Values.service.rcache.port }}"
            - name: RCACHE_RMQ_DSN
              valueFrom:
                secretKeyRef:
                  name: rmq-rcache-secret
                  key: RCACHE_RMQ_DSN
            # ALS params
            - name: ALS_KAFKA_SERVER_ID
              value: worker
            - name: ALS_KAFKA_CLIENT_BOOTSTRAP_SERVERS
              value: "{{ include "afc-int.fullname" . }}-als-kafka:{{ .Values.service.als_kafka.port }}"
            - name: ALS_KAFKA_MAX_REQUEST_SIZE
              value: {{ .Values.service.als_kafka.max_request_size | quote | replace ":" "" }}
          resources:
            {{- toYaml .Values.resources.worker | nindent 12 }}
      volumes:
        - name: cont-confs
          persistentVolumeClaim:
            claimName: cont-confs-claim
      imagePullSecrets:
        - name: brcm-artifactory-secret
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
