# check .env file for env vars info and values

version: '3.2'
services:
  ratdb:
    image: ${PUB_REPO:-ghcr.io/open-afc-project}/ratdb-image:${TAG:-latest}
    restart: always
    dns_search: [.]

  rmq:
    image: ${PUB_REPO:-ghcr.io/open-afc-project}/rmq-image:${TAG:-latest}
    restart: always
    dns_search: [.]

  dispatcher:
    image: ${PUB_REPO:-ghcr.io/open-afc-project}/dispatcher-image:${TAG:-latest}
    restart: always
    ports:
      - "${EXT_PORT}:80"
      - "${EXT_PORT_S}:443"
    volumes:
      - ${VOL_H_NGNX:-/tmp}:${VOL_C_NGNX:-/dummyngnx}
    environment:
      - AFC_SERVER_NAME=${AFC_SERVER_NAME:-_}
      - AFC_ENFORCE_HTTPS=${AFC_ENFORCE_HTTPS:-TRUE}
      # set to true if required to enforce mTLS check
      - AFC_ENFORCE_MTLS=false
      - AFC_MSGHND_NAME=msghnd
      - AFC_MSGHND_PORT=8000
      - AFC_WEBUI_NAME=rat_server
      - AFC_WEBUI_PORT=80
      # Filestorage params:
      - AFC_OBJST_HOST=objst
      - AFC_OBJST_PORT=5000
      - AFC_OBJST_SCHEME=HTTP
      # Prometheus params:
      - AFC_PROMETHEUS_TARGET=prometheus:9090
      - AFC_PROMETHEUS_ENABLED=true
    depends_on:
      - msghnd
      - rat_server
      - prometheus
      - grafana
    dns_search: [.]

  rat_server:
    image: ${PRIV_REPO:-ghcr.io/open-afc-project}/afc-server:${TAG:-latest}
    volumes:
      - ${VOL_H_DB}:${VOL_C_DB}
      - ./pipe:/pipe
    depends_on:
      - ratdb
      - rmq
      - objst
      - als_kafka
      - als_siphon
      - bulk_postgres
      - rcache
    secrets:
      - RATDB_PASSWORD
      - FLASK_SECRET_KEY
      - GOOGLE_APIKEY
      - CAPTCHA_SECRET
      - CAPTCHA_SITEKEY
      - MAIL_PASSWORD
      - OIDC_CLIENT_ID
      - OIDC_CLIENT_SECRET
      - RCACHE_DB_PASSWORD
    dns_search: [.]
    environment:
      - FLASKFILE_SQLALCHEMY_DATABASE_PASSWORD=${VOL_C_SECRETS}/RATDB_PASSWORD
      - FLASKFILE_SECRET_KEY=${VOL_C_SECRETS}/FLASK_SECRET_KEY
      - FLASKFILE_GOOGLE_APIKEY=${VOL_C_SECRETS}/GOOGLE_APIKEY
      - RATAPIFILE_CAPTCHA_SECRET=${VOL_C_SECRETS}/CAPTCHA_SECRET
      - RATAPIFILE_CAPTCHA_SITEKEY=${VOL_C_SECRETS}/CAPTCHA_SITEKEY
      - RATAPIFILE_MAIL_PASSWORD=${VOL_C_SECRETS}/MAIL_PASSWORD
      - OIDCFILE_OIDC_CLIENT_ID=${VOL_C_SECRETS}/OIDC_CLIENT_ID
      - OIDCFILE_OIDC_CLIENT_SECRET=${VOL_C_SECRETS}/OIDC_CLIENT_SECRET
      # RabbitMQ server name:
      - BROKER_TYPE=external
      - BROKER_FQDN=rmq
      # Filestorage params:
      - AFC_OBJST_HOST=objst
      - AFC_OBJST_PORT=5000
      - AFC_OBJST_SCHEME=HTTP
      # ALS params
      - ALS_KAFKA_SERVER_ID=rat_server
      - ALS_KAFKA_CLIENT_BOOTSTRAP_SERVERS=${ALS_KAFKA_SERVER_}:${ALS_KAFKA_CLIENT_PORT_}
      - ALS_KAFKA_MAX_REQUEST_SIZE=${ALS_KAFKA_MAX_REQUEST_SIZE_}
      # Rcache parameters
      - RCACHE_ENABLED=${RCACHE_ENABLED}
      - RCACHE_POSTGRES_DSN=postgresql://postgres:postgres@bulk_postgres/rcache
      - RCACHE_POSTGRES_PASSWORD_FILE=${VOL_C_SECRETS}/RCACHE_DB_PASSWORD
      - RCACHE_SERVICE_URL=http://rcache:${RCACHE_CLIENT_PORT}
      - RCACHE_RMQ_DSN=amqp://rcache:rcache@rmq:5672/rcache

  msghnd:
    image: ${PRIV_REPO:-ghcr.io/open-afc-project}/afc-msghnd:${TAG:-latest}
    environment:
      - FLASKFILE_SQLALCHEMY_DATABASE_PASSWORD=${VOL_C_SECRETS}/RATDB_PASSWORD
      - FLASKFILE_SECRET_KEY=${VOL_C_SECRETS}/FLASK_SECRET_KEY
      - FLASKFILE_GOOGLE_APIKEY=${VOL_C_SECRETS}/GOOGLE_APIKEY
      - RATAPIFILE_CAPTCHA_SECRET=${VOL_C_SECRETS}/CAPTCHA_SECRET
      - RATAPIFILE_CAPTCHA_SITEKEY=${VOL_C_SECRETS}/CAPTCHA_SITEKEY
      - RATAPIFILE_MAIL_PASSWORD=${VOL_C_SECRETS}/MAIL_PASSWORD
      - OIDCFILE_OIDC_CLIENT_ID=${VOL_C_SECRETS}/OIDC_CLIENT_ID
      - OIDCFILE_OIDC_CLIENT_SECRET=${VOL_C_SECRETS}/OIDC_CLIENT_SECRET
      # RabbitMQ server name:
      - BROKER_TYPE=external
      - BROKER_FQDN=rmq
      # Filestorage params:
      - AFC_OBJST_HOST=objst
      - AFC_OBJST_PORT=5000
      - AFC_OBJST_SCHEME=HTTP
      # ALS params
      - ALS_KAFKA_SERVER_ID=msghnd
      - ALS_KAFKA_CLIENT_BOOTSTRAP_SERVERS=${ALS_KAFKA_SERVER_}:${ALS_KAFKA_CLIENT_PORT_}
      - ALS_KAFKA_MAX_REQUEST_SIZE=${ALS_KAFKA_MAX_REQUEST_SIZE_}
      # Rcache parameters
      - RCACHE_ENABLED=${RCACHE_ENABLED}
      - RCACHE_POSTGRES_DSN=postgresql://postgres:postgres@bulk_postgres/rcache
      - RCACHE_POSTGRES_PASSWORD_FILE=${VOL_C_SECRETS}/RCACHE_DB_PASSWORD
      - RCACHE_SERVICE_URL=http://rcache:${RCACHE_CLIENT_PORT}
      - RCACHE_RMQ_DSN=amqp://rcache:rcache@rmq:5672/rcache
    dns_search: [.]
    secrets:
      - RATDB_PASSWORD
      - FLASK_SECRET_KEY
      - GOOGLE_APIKEY
      - CAPTCHA_SECRET
      - CAPTCHA_SITEKEY
      - MAIL_PASSWORD
      - OIDC_CLIENT_ID
      - OIDC_CLIENT_SECRET
      - RCACHE_DB_PASSWORD
    depends_on:
      - ratdb
      - rmq
      - objst
      - als_kafka
      - als_siphon
      - bulk_postgres
      - rcache

  objst:
    image: ${PUB_REPO:-ghcr.io/open-afc-project}/objstorage-image:${TAG:-latest}
    environment:
      - AFC_OBJST_PORT=5000
      - AFC_OBJST_HIST_PORT=4999
      - AFC_OBJST_LOCAL_DIR=/storage
      - FLASKFILE_SQLALCHEMY_DATABASE_PASSWORD=${VOL_C_SECRETS}/RATDB_PASSWORD
      - FLASKFILE_SECRET_KEY=${VOL_C_SECRETS}/FLASK_SECRET_KEY
      - FLASKFILE_GOOGLE_APIKEY=${VOL_C_SECRETS}/GOOGLE_APIKEY
      - RATAPIFILE_CAPTCHA_SECRET=${VOL_C_SECRETS}/CAPTCHA_SECRET
      - RATAPIFILE_CAPTCHA_SITEKEY=${VOL_C_SECRETS}/CAPTCHA_SITEKEY
      - RATAPIFILE_MAIL_PASSWORD=${VOL_C_SECRETS}/MAIL_PASSWORD
      - OIDCFILE_OIDC_CLIENT_ID=${VOL_C_SECRETS}/OIDC_CLIENT_ID
      - OIDCFILE_OIDC_CLIENT_SECRET=${VOL_C_SECRETS}/OIDC_CLIENT_SECRET
    secrets:
      - RATDB_PASSWORD
      - FLASK_SECRET_KEY
      - GOOGLE_APIKEY
      - CAPTCHA_SECRET
      - CAPTCHA_SITEKEY
      - MAIL_PASSWORD
      - OIDC_CLIENT_ID
      - OIDC_CLIENT_SECRET
    dns_search: [.]

  worker:
    image: ${PRIV_REPO:-ghcr.io/open-afc-project}/afc-worker:${TAG:-latest}
    volumes:
      - ${VOL_H_DB}:${VOL_C_DB}
      - ./pipe:/pipe
    environment:
      # Filestorage params:
      - AFC_OBJST_HOST=objst
      - AFC_OBJST_PORT=5000
      - AFC_OBJST_SCHEME=HTTP
      # worker params
      - AFC_WORKER_CELERY_WORKERS=rat_1 rat_2
      # RabbitMQ server name:
      - BROKER_TYPE=external
      - BROKER_FQDN=rmq
      # afc-engine preload lib params
      - AFC_AEP_ENABLE=1
      - AFC_AEP_DEBUG=1
      - AFC_AEP_REAL_MOUNTPOINT=${VOL_C_DB}/3dep/1_arcsec
      # Rcache parameters
      - RCACHE_ENABLED=${RCACHE_ENABLED}
      - RCACHE_SERVICE_URL=http://rcache:${RCACHE_CLIENT_PORT}
      - RCACHE_RMQ_DSN=amqp://rcache:rcache@rmq:5672/rcache
      # ALS params
      - ALS_KAFKA_SERVER_ID=worker
      - ALS_KAFKA_CLIENT_BOOTSTRAP_SERVERS=${ALS_KAFKA_SERVER_}:${ALS_KAFKA_CLIENT_PORT_}
      - ALS_KAFKA_MAX_REQUEST_SIZE=${ALS_KAFKA_MAX_REQUEST_SIZE_}
    depends_on:
      - ratdb
      - rmq
      - objst
      - rcache
      - als_kafka
    dns_search: [.]

  als_kafka:
    image: ${PUB_REPO:-ghcr.io/open-afc-project}/als-kafka-image:${TAG:-latest}
    restart: always
    environment:
      - KAFKA_ADVERTISED_HOST=${ALS_KAFKA_SERVER_}
      - KAFKA_CLIENT_PORT=${ALS_KAFKA_CLIENT_PORT_}
      - KAFKA_MAX_REQUEST_SIZE=${ALS_KAFKA_MAX_REQUEST_SIZE_}
    dns_search: [.]

  als_siphon:
    image: ${PUB_REPO:-ghcr.io/open-afc-project}/als-siphon-image:${TAG:-latest}
    restart: always
    environment:
      - KAFKA_SERVERS=${ALS_KAFKA_SERVER_}:${ALS_KAFKA_CLIENT_PORT_}
      - POSTGRES_INIT_CONN_STR=bulk_postgres
      - POSTGRES_ALS_CONN_STR=bulk_postgres
      - POSTGRES_LOG_CONN_STR=bulk_postgres
      - POSTGRES_INIT_PASSWORD_FILE=${VOL_C_SECRETS}/POSTGRES_PASSWORD
      - POSTGRES_ALS_PASSWORD_FILE=${VOL_C_SECRETS}/ALS_DB_PASSWORD
      - POSTGRES_LOG_PASSWORD_FILE=${VOL_C_SECRETS}/ALS_JSON_LOG_DB_PASSWORD
      - INIT_IF_EXISTS=skip
      - KAFKA_MAX_REQUEST_SIZE=${ALS_KAFKA_MAX_REQUEST_SIZE_}
    secrets:
      - ALS_DB_PASSWORD
      - ALS_JSON_LOG_DB_PASSWORD
      - POSTGRES_PASSWORD
    depends_on:
      - als_kafka
      - bulk_postgres
    dns_search: [.]

  bulk_postgres:
    image: ${PUB_REPO:-ghcr.io/open-afc-project}/bulk-postgres-image:${TAG:-latest}
    dns_search: [.]

  uls_downloader:
    image: ${PUB_REPO:-ghcr.io/open-afc-project}/uls-downloader:${TAG:-latest}
    restart: always
    environment:
      - ULS_AFC_URL=http://msghnd:8000/fbrat/ap-afc/availableSpectrumInquiryInternal?nocache=True
      - ULS_DELAY_HR=1
      - ULS_SERVICE_STATE_DB_DSN=postgresql://postgres:postgres@bulk_postgres/fs_state
      - ULS_SERVICE_STATE_DB_PASSWORD_FILE=${VOL_C_SECRETS}/ULS_STATE_DB_PASSWORD
      - ULS_PROMETHEUS_PORT=8000
      # ULS_SMTP_SERVER, ULS_SMTP_USERNAME and, maybe, ULS_SMTP_PORT,
      # ULS_SMTP_SSL, ULS_SMTP_TLS should also be specified to send email
      # notifications
      - ULS_SMTP_PASSWORD_FILE=${VOL_C_SECRETS}/MAIL_PASSWORD
      # Rcache parameters
      - RCACHE_ENABLED=${RCACHE_ENABLED}
      - RCACHE_SERVICE_URL=http://rcache:${RCACHE_CLIENT_PORT}
    volumes:
      - ${VOL_H_DB}:/rat_transfer
    secrets:
      - MAIL_PASSWORD
      - ULS_STATE_DB_PASSWORD
    depends_on:
      - bulk_postgres
    dns_search: [.]

  cert_db:
    image: ${PUB_REPO:-ghcr.io/open-afc-project}/cert_db:${TAG:-latest}
    depends_on:
      - ratdb
    links:
      - ratdb
      - als_kafka
    environment:
      - ALS_KAFKA_SERVER_ID=cert_db
      - ALS_KAFKA_CLIENT_BOOTSTRAP_SERVERS=${ALS_KAFKA_SERVER_}:${ALS_KAFKA_CLIENT_PORT_}
      - ALS_KAFKA_MAX_REQUEST_SIZE=${ALS_KAFKA_MAX_REQUEST_SIZE_}
      - FLASKFILE_SQLALCHEMY_DATABASE_PASSWORD=${VOL_C_SECRETS}/RATDB_PASSWORD
      - FLASKFILE_SECRET_KEY=${VOL_C_SECRETS}/FLASK_SECRET_KEY
      - FLASKFILE_GOOGLE_APIKEY=${VOL_C_SECRETS}/GOOGLE_APIKEY
      - RATAPIFILE_CAPTCHA_SECRET=${VOL_C_SECRETS}/CAPTCHA_SECRET
      - RATAPIFILE_CAPTCHA_SITEKEY=${VOL_C_SECRETS}/CAPTCHA_SITEKEY
      - RATAPIFILE_MAIL_PASSWORD=${VOL_C_SECRETS}/MAIL_PASSWORD
      - OIDCFILE_OIDC_CLIENT_ID=${VOL_C_SECRETS}/OIDC_CLIENT_ID
      - OIDCFILE_OIDC_CLIENT_SECRET=${VOL_C_SECRETS}/OIDC_CLIENT_SECRET
    secrets:
      - RATDB_PASSWORD
      - FLASK_SECRET_KEY
      - GOOGLE_APIKEY
      - CAPTCHA_SECRET
      - CAPTCHA_SITEKEY
      - MAIL_PASSWORD
      - OIDC_CLIENT_ID
      - OIDC_CLIENT_SECRET

  rcache:
    image: ${PUB_REPO:-ghcr.io/open-afc-project}/rcache-image:${TAG:-latest}
    restart: always
    environment:
      - RCACHE_ENABLED=${RCACHE_ENABLED}
      - RCACHE_CLIENT_PORT=${RCACHE_CLIENT_PORT}
      - RCACHE_POSTGRES_DSN=postgresql://postgres:postgres@bulk_postgres/rcache
      - RCACHE_POSTGRES_PASSWORD_FILE=${VOL_C_SECRETS}/RCACHE_DB_PASSWORD
      - RCACHE_AFC_REQ_URL=http://msghnd:8000/fbrat/ap-afc/availableSpectrumInquiry?nocache=True
      - RCACHE_RULESETS_URL=http://rat_server/fbrat/ratapi/v1/GetRulesetIDs
      - RCACHE_CONFIG_RETRIEVAL_URL=http://rat_server/fbrat/ratapi/v1/GetAfcConfigByRulesetID
    secrets:
      - RCACHE_DB_PASSWORD
    depends_on:
      - bulk_postgres
    dns_search: [.]

  grafana:
    image: ${PUB_REPO:-ghcr.io/open-afc-project}/grafana-image:${TAG:-latest}
    restart: always
    depends_on:
      - prometheus
      - bulk_postgres
    dns_search: [.]

  prometheus:
    image: ${PUB_REPO:-ghcr.io/open-afc-project}/prometheus-image:${TAG:-latest}
    restart: always
    depends_on:
      - cadvisor
    dns_search: [.]

  cadvisor:
    image:  ${PUB_REPO:-ghcr.io/open-afc-project}/cadvisor-image:${TAG:-latest}
    restart: always
    volumes:
    - /:/rootfs:ro
    - /var/run:/var/run:rw
    - /sys:/sys:ro
    - /var/lib/docker/:/var/lib/docker:ro
    - /dev/disk/:/dev/disk:ro
    dns_search: [.]

  nginxexporter:
    image: ${PUB_REPO:-ghcr.io/open-afc-project}/nginxexporter-image:${TAG:-latest}
    restart: always
    depends_on:
      - dispatcher
    dns_search: [.]

secrets:
  ALS_DB_PASSWORD:
    file: ${VOL_H_SECRETS}/ALS_DB_PASSWORD
  ALS_JSON_LOG_DB_PASSWORD:
    file: ${VOL_H_SECRETS}/ALS_JSON_LOG_DB_PASSWORD
  CAPTCHA_SECRET:
    file: ${VOL_H_SECRETS}/CAPTCHA_SECRET
  CAPTCHA_SITEKEY:
    file: ${VOL_H_SECRETS}/CAPTCHA_SITEKEY
  FLASK_SECRET_KEY:
    file: ${VOL_H_SECRETS}/FLASK_SECRET_KEY
  GOOGLE_APIKEY:
    file: ${VOL_H_SECRETS}/GOOGLE_APIKEY
  MAIL_PASSWORD:
    file: ${VOL_H_SECRETS}/MAIL_PASSWORD
  OIDC_CLIENT_ID:
    file: ${VOL_H_SECRETS}/OIDC_CLIENT_ID
  OIDC_CLIENT_SECRET:
    file: ${VOL_H_SECRETS}/OIDC_CLIENT_SECRET
  POSTGRES_PASSWORD:
    file: ${VOL_H_SECRETS}/POSTGRES_PASSWORD
  RATDB_PASSWORD:
    file: ${VOL_H_SECRETS}/RATDB_PASSWORD
  RCACHE_DB_PASSWORD:
    file: ${VOL_H_SECRETS}/RCACHE_DB_PASSWORD
  ULS_STATE_DB_PASSWORD:
    file: ${VOL_H_SECRETS}/ULS_STATE_DB_PASSWORD
