# check .env file for env vars info and values

services:
  ratdb:
    image: ${PUB_REPO:-ghcr.io/open-afc-project}/ratdb-image:${TAG:-latest}
    restart: always
    # for persistent configuration
    # volumes:
    #   - ./pgdata:/var/lib/pgsql/data
    # environment:
    #   POSTGRES_PASSWORD: <default password>
    #   PGDATA: /var/lib/pgsql/data
    #   POSTGRES_DB: fbrat
    dns_search: [.]

  rmq:
    image: ${PUB_REPO:-ghcr.io/open-afc-project}/rmq-image:${TAG:-latest}
    restart: always
    dns_search: [.]

  dispatcher:
    image: ${PUB_REPO:-ghcr.io/open-afc-project}/dispatcher-image:${TAG:-latest}
    restart: always

    ports:
      # Ports to be used externally
      - "${EXT_IP:-0.0.0.0}:80-180:80"
      - "${EXT_IP:-0.0.0.0}:443-543:443"
    volumes:
      - ./ssl/nginx:/certificates/servers
    # Uncomment and update if you plan to use mTLS
    #   - ./ssl:/usr/share/ca-certificates/certs
    environment:
      - AFC_SERVER_NAME=_
      - AFC_ENFORCE_HTTPS=TRUE
      # set to true if required to enforce mTLS check
      - AFC_ENFORCE_MTLS=false
      - AFC_MSGHND_NAME=${AFC_REQ_SERVER}
      - AFC_MSGHND_PORT=${AFC_REQ_SERVER_PORT}
      - AFC_WEBUI_NAME=${AFC_WEBUI_NAME}
      - AFC_WEBUI_PORT=80
      # Filestorage params:
      - AFC_OBJST_HOST=${AFC_OBJST_HOST}
      - AFC_OBJST_PORT=${AFC_OBJST_PORT}
      - AFC_OBJST_SCHEME=${AFC_OBJST_SCHEME}
      # Prometheus params:
      - AFC_PROMETHEUS_TARGET=prometheus:9090
      - AFC_PROMETHEUS_ENABLED=true
    depends_on:
      - afcserver
      - msghnd
      - rat_server
      - prometheus
      - grafana
    dns_search: [.]

  rat_server:
    image: ${PRIV_REPO:-ghcr.io/open-afc-project}/webui-image:${TAG:-latest}
    restart: always
    volumes:
      - ${VOL_H_DB}:${VOL_C_DB}
      - ./pipe:/pipe
      # In case you want to cinfigure OIDC
      # - ./OIDC:/OIDC
    depends_on:
      - ratdb
      - rmq
      - objst
      - als_kafka
      - als_siphon
      - bulk_postgres
      - rcache
    secrets:
      - RATDB_PASSWORD
      - FLASK_SECRET_KEY
      - GOOGLE_APIKEY
      - CAPTCHA_SECRET
      - CAPTCHA_SITEKEY
      - MAIL_PASSWORD
      - OIDC_CLIENT_ID
      - OIDC_CLIENT_SECRET
      - RCACHE_DB_PASSWORD
      - DB_CREATOR_PASSWORD_RATDB
      - DB_CREATOR_PASSWORD_BULK_POSTGRES
    dns_search: [.]
    environment:
      - FLASKFILE_SQLALCHEMY_DATABASE_PASSWORD=${VOL_C_SECRETS}/RATDB_PASSWORD
      - FLASKFILE_SECRET_KEY=${VOL_C_SECRETS}/FLASK_SECRET_KEY
      - FLASKFILE_GOOGLE_APIKEY=${VOL_C_SECRETS}/GOOGLE_APIKEY
      - RATAPIFILE_CAPTCHA_SECRET=${VOL_C_SECRETS}/CAPTCHA_SECRET
      - RATAPIFILE_CAPTCHA_SITEKEY=${VOL_C_SECRETS}/CAPTCHA_SITEKEY
      - RATAPIFILE_MAIL_PASSWORD=${VOL_C_SECRETS}/MAIL_PASSWORD
      - OIDCFILE_OIDC_CLIENT_ID=${VOL_C_SECRETS}/OIDC_CLIENT_ID
      - OIDCFILE_OIDC_CLIENT_SECRET=${VOL_C_SECRETS}/OIDC_CLIENT_SECRET
      # RabbitMQ server name:
      - BROKER_TYPE=${BROKER_TYPE}
      - BROKER_FQDN=${BROKER_FQDN}
      # Filestorage params:
      - AFC_OBJST_HOST=${AFC_OBJST_HOST}
      - AFC_OBJST_PORT=${AFC_OBJST_PORT}
      - AFC_OBJST_SCHEME=${AFC_OBJST_SCHEME}
      # ALS params
      - ALS_KAFKA_SERVER_ID=${AFC_WEBUI_NAME}
      - ALS_KAFKA_CLIENT_BOOTSTRAP_SERVERS=${ALS_KAFKA_SERVER}:${ALS_KAFKA_CLIENT_PORT}
      - ALS_KAFKA_MAX_REQUEST_SIZE=${ALS_KAFKA_MAX_REQUEST_SIZE}
      - AFC_ALS_TOPIC_NAME=${AFC_ALS_TOPIC_NAME}
      - AFC_JSON_TOPIC_PREFIX=${AFC_JSON_TOPIC_PREFIX}
      # Rcache parameters
      - RCACHE_ENABLED=${RCACHE_ENABLED}
      - RCACHE_POSTGRES_DSN=${RCACHE_POSTGRES_DSN}
      - RCACHE_POSTGRES_PASSWORD_FILE=${VOL_C_SECRETS}/RCACHE_DB_PASSWORD
      - RCACHE_SERVICE_URL=http://rcache:${RCACHE_CLIENT_PORT}
      - RCACHE_RMQ_DSN=${RCACHE_RMQ_DSN}
      - AFC_STATE_VENDOR_EXTENSIONS=${AFC_STATE_VENDOR_EXTENSIONS}
      # Database Creator parameters and endpoint
      - AFC_DB_CREATOR_DSN_RATDB=postgresql://postgres:postgres@ratdb/postgres
      - AFC_DB_CREATOR_PASSWORD_FILE_RATDB=${VOL_C_SECRETS}/DB_CREATOR_PASSWORD_RATDB
      - AFC_DB_CREATOR_DSN_BULK_POSTGRES=postgresql://postgres:postgres@bulk_postgres/postgres
      - AFC_DB_CREATOR_PASSWORD_FILE_BULK_POSTGRES=${VOL_C_SECRETS}/DB_CREATOR_PASSWORD_BULK_POSTGRES
      # OIDC and Captcha conf can be added here:
      # - OIDC_ARG=/OIDC/oidc_env.cfg
      # - RATAPI_ARG=/OIDC/ratapi_env.cfg

  msghnd:
    image: ${PRIV_REPO:-ghcr.io/open-afc-project}/afc-msghnd:${TAG:-latest}
    environment:
      - FLASKFILE_SQLALCHEMY_DATABASE_PASSWORD=${VOL_C_SECRETS}/RATDB_PASSWORD
      - FLASKFILE_SECRET_KEY=${VOL_C_SECRETS}/FLASK_SECRET_KEY
      - FLASKFILE_GOOGLE_APIKEY=${VOL_C_SECRETS}/GOOGLE_APIKEY
      - RATAPIFILE_CAPTCHA_SECRET=${VOL_C_SECRETS}/CAPTCHA_SECRET
      - RATAPIFILE_CAPTCHA_SITEKEY=${VOL_C_SECRETS}/CAPTCHA_SITEKEY
      - RATAPIFILE_MAIL_PASSWORD=${VOL_C_SECRETS}/MAIL_PASSWORD
      - OIDCFILE_OIDC_CLIENT_ID=${VOL_C_SECRETS}/OIDC_CLIENT_ID
      - OIDCFILE_OIDC_CLIENT_SECRET=${VOL_C_SECRETS}/OIDC_CLIENT_SECRET
      # RabbitMQ server name:
      - BROKER_TYPE=${BROKER_TYPE}
      - BROKER_FQDN=${BROKER_FQDN}
      # Filestorage params:
      - AFC_OBJST_HOST=${AFC_OBJST_HOST}
      - AFC_OBJST_PORT=${AFC_OBJST_PORT}
      - AFC_OBJST_SCHEME=${AFC_OBJST_SCHEME}
      # ALS params
      - ALS_KAFKA_SERVER_ID=msghnd
      - ALS_KAFKA_CLIENT_BOOTSTRAP_SERVERS=${ALS_KAFKA_SERVER}:${ALS_KAFKA_CLIENT_PORT}
      - ALS_KAFKA_MAX_REQUEST_SIZE=${ALS_KAFKA_MAX_REQUEST_SIZE}
      - AFC_ALS_TOPIC_NAME=${AFC_ALS_TOPIC_NAME}
      - AFC_JSON_TOPIC_PREFIX=${AFC_JSON_TOPIC_PREFIX}
      # Rcache parameters
      - RCACHE_ENABLED=${RCACHE_ENABLED}
      - RCACHE_POSTGRES_DSN=${RCACHE_POSTGRES_DSN}
      - RCACHE_POSTGRES_PASSWORD_FILE=${VOL_C_SECRETS}/RCACHE_DB_PASSWORD
      - RCACHE_SERVICE_URL=http://rcache:${RCACHE_CLIENT_PORT}
      - RCACHE_RMQ_DSN=${RCACHE_RMQ_DSN}
      - AFC_STATE_VENDOR_EXTENSIONS=${AFC_STATE_VENDOR_EXTENSIONS}
    dns_search: [.]
    secrets:
      - RATDB_PASSWORD
      - FLASK_SECRET_KEY
      - GOOGLE_APIKEY
      - CAPTCHA_SECRET
      - CAPTCHA_SITEKEY
      - MAIL_PASSWORD
      - OIDC_CLIENT_ID
      - OIDC_CLIENT_SECRET
      - RCACHE_DB_PASSWORD
    depends_on:
      - ratdb
      - rmq
      - objst
      - als_kafka
      - als_siphon
      - bulk_postgres
      - rcache

  afcserver:
    image: ${PRIV_REPO:-ghcr.io/open-afc-project}/afcserver-image:${TAG:-latest}
    restart: always
    environment:
      - AFC_SERVER_PORT=${AFC_REQ_SERVER_PORT}
      - AFC_SERVER_RATDB_DSN=postgresql://postgres:postgres@ratdb/fbrat
      - AFC_SERVER_RATDB_RATDB_PASSWORD_FILE=${VOL_C_SECRETS}/RATDB_PASSWORD
      - AFC_SERVER_REQUEST_TIMEOUT=180
      - AFC_SERVER_CONFIG_REFRESH=5
      - RCACHE_POSTGRES_DSN=${RCACHE_POSTGRES_DSN}
      - RCACHE_POSTGRES_PASSWORD_FILE=${VOL_C_SECRETS}/RCACHE_DB_PASSWORD
      - RCACHE_RMQ_DSN=${RCACHE_RMQ_DSN}
      - AFC_STATE_VENDOR_EXTENSIONS=${AFC_STATE_VENDOR_EXTENSIONS}
      # ALS params
      - ALS_KAFKA_SERVER_ID=${AFC_REQ_SERVER}
      - ALS_KAFKA_CLIENT_BOOTSTRAP_SERVERS=${ALS_KAFKA_SERVER}:${ALS_KAFKA_CLIENT_PORT}
      - ALS_KAFKA_MAX_REQUEST_SIZE=${ALS_KAFKA_MAX_REQUEST_SIZE}
      - AFC_ALS_TOPIC_NAME=${AFC_ALS_TOPIC_NAME}
      - AFC_JSON_TOPIC_PREFIX=${AFC_JSON_TOPIC_PREFIX}
      # Filestorage params:
      - AFC_OBJST_HOST=${AFC_OBJST_HOST}
      - AFC_OBJST_PORT=${AFC_OBJST_PORT}
      - AFC_OBJST_SCHEME=${AFC_OBJST_SCHEME}
      # RabbitMQ server name:
      - BROKER_TYPE=${BROKER_TYPE}
      - BROKER_FQDN=${BROKER_FQDN}
    dns_search: [.]
    secrets:
      - RATDB_PASSWORD
      - RCACHE_DB_PASSWORD
    depends_on:
      - ratdb
      - rmq
      - als_kafka
      - bulk_postgres
      - objst

  objst:
    image: ${PUB_REPO:-ghcr.io/open-afc-project}/objstorage-image:${TAG:-latest}
    environment:
      - AFC_OBJST_PORT=${AFC_OBJST_PORT}
      - AFC_OBJST_HIST_PORT=4999
      - AFC_OBJST_LOCAL_DIR=/storage
      - FLASKFILE_SQLALCHEMY_DATABASE_PASSWORD=${VOL_C_SECRETS}/RATDB_PASSWORD
      - FLASKFILE_SECRET_KEY=${VOL_C_SECRETS}/FLASK_SECRET_KEY
      - FLASKFILE_GOOGLE_APIKEY=${VOL_C_SECRETS}/GOOGLE_APIKEY
      - RATAPIFILE_CAPTCHA_SECRET=${VOL_C_SECRETS}/CAPTCHA_SECRET
      - RATAPIFILE_CAPTCHA_SITEKEY=${VOL_C_SECRETS}/CAPTCHA_SITEKEY
      - RATAPIFILE_MAIL_PASSWORD=${VOL_C_SECRETS}/MAIL_PASSWORD
      - OIDCFILE_OIDC_CLIENT_ID=${VOL_C_SECRETS}/OIDC_CLIENT_ID
      - OIDCFILE_OIDC_CLIENT_SECRET=${VOL_C_SECRETS}/OIDC_CLIENT_SECRET
    secrets:
      - RATDB_PASSWORD
      - FLASK_SECRET_KEY
      - GOOGLE_APIKEY
      - CAPTCHA_SECRET
      - CAPTCHA_SITEKEY
      - MAIL_PASSWORD
      - OIDC_CLIENT_ID
      - OIDC_CLIENT_SECRET
    dns_search: [.]

  worker:
    image: ${PRIV_REPO:-ghcr.io/open-afc-project}/afc-worker:${TAG:-latest}
    volumes:
      - ${VOL_H_DB}:${VOL_C_DB}
      # used for testing mainly
      # - ./pipe:/pipe
    environment:
      # Filestorage params:
      - AFC_OBJST_HOST=${AFC_OBJST_HOST}
      - AFC_OBJST_PORT=${AFC_OBJST_PORT}
      - AFC_OBJST_SCHEME=${AFC_OBJST_SCHEME}
      # worker params
      - AFC_WORKER_CELERY_WORKERS=rat_1 rat_2
      # RabbitMQ server name:
      - BROKER_TYPE=${BROKER_TYPE}
      - BROKER_FQDN=${BROKER_FQDN}
      # afc-engine preload lib params
      - AFC_AEP_ENABLE=1
      - AFC_AEP_DEBUG=1
      - AFC_AEP_REAL_MOUNTPOINT=${VOL_C_DB}/3dep/1_arcsec
      # Rcache parameters
      - RCACHE_ENABLED=${RCACHE_ENABLED}
      - RCACHE_SERVICE_URL=http://rcache:${RCACHE_CLIENT_PORT}
      - RCACHE_RMQ_DSN=${RCACHE_RMQ_DSN}
      # ALS params
      - ALS_KAFKA_SERVER_ID=worker
      - ALS_KAFKA_CLIENT_BOOTSTRAP_SERVERS=${ALS_KAFKA_SERVER}:${ALS_KAFKA_CLIENT_PORT}
      - ALS_KAFKA_MAX_REQUEST_SIZE=${ALS_KAFKA_MAX_REQUEST_SIZE}
      - AFC_ALS_TOPIC_NAME=${AFC_ALS_TOPIC_NAME}
      - AFC_JSON_TOPIC_PREFIX=${AFC_JSON_TOPIC_PREFIX}
      # TIMEOUT
      - AFC_WORKER_ENG_TOUT=300
    depends_on:
      - ratdb
      - rmq
      - objst
      - rcache
      - als_kafka
    dns_search: [.]

  als_kafka:
    image: ${PUB_REPO:-ghcr.io/open-afc-project}/als-kafka-image:${TAG:-latest}
    restart: always
    environment:
      - KAFKA_ADVERTISED_HOST=${ALS_KAFKA_SERVER}
      - KAFKA_CLIENT_PORT=${ALS_KAFKA_CLIENT_PORT}
      - KAFKA_MAX_REQUEST_SIZE=${ALS_KAFKA_MAX_REQUEST_SIZE}
      - AFC_ALS_TOPIC_NAME=${AFC_ALS_TOPIC_NAME}
      - AFC_JSON_TOPIC_PREFIX=${AFC_JSON_TOPIC_PREFIX}
    dns_search: [.]

  als_siphon:
    image: ${PUB_REPO:-ghcr.io/open-afc-project}/als-siphon-image:${TAG:-latest}
    restart: always
    environment:
      - KAFKA_SERVERS=${ALS_KAFKA_SERVER}:${ALS_KAFKA_CLIENT_PORT}
      - POSTGRES_ALS_CONN_STR=bulk_postgres
      - POSTGRES_LOG_CONN_STR=bulk_postgres
      - POSTGRES_ALS_PASSWORD_FILE=${VOL_C_SECRETS}/ALS_DB_PASSWORD
      - POSTGRES_LOG_PASSWORD_FILE=${VOL_C_SECRETS}/ALS_JSON_LOG_DB_PASSWORD
      - AFC_DB_CREATOR_URL=http://${AFC_WEBUI_NAME}/fbrat/admin/CreateDb
      - KAFKA_MAX_REQUEST_SIZE=${ALS_KAFKA_MAX_REQUEST_SIZE}
      - AFC_ALS_TOPIC_NAME=${AFC_ALS_TOPIC_NAME}
      - AFC_JSON_TOPIC_PREFIX=${AFC_JSON_TOPIC_PREFIX}
      - AFC_ALS_MONTH_PARTITIONS_AHEAD=6
    secrets:
      - ALS_DB_PASSWORD
      - ALS_JSON_LOG_DB_PASSWORD
    depends_on:
      - als_kafka
      - bulk_postgres
    dns_search: [.]

  bulk_postgres:
    image: ${PUB_REPO:-ghcr.io/open-afc-project}/bulk-postgres-image:${TAG:-latest}
    dns_search: [.]
    # add for bulk_postgres persistence
    # volumes:
    #   - ./bulk_pgdata:/var/lib/postgresql/data

  uls_downloader:
    image: ${PUB_REPO:-ghcr.io/open-afc-project}/uls-downloader:${TAG:-latest}
    restart: always
    environment:
      - ULS_AFC_URL=http://${AFC_REQ_SERVER}:${AFC_REQ_SERVER_PORT}/fbrat/ap-afc/availableSpectrumInquiryInternal?nocache=True
      - ULS_DELAY_HR=1
      - ULS_SERVICE_STATE_DB_DSN=postgresql://postgres:postgres@bulk_postgres/fs_state
      - ULS_SERVICE_STATE_DB_PASSWORD_FILE=${VOL_C_SECRETS}/ULS_STATE_DB_PASSWORD
      - ULS_PROMETHEUS_PORT=8000
      # ULS_SMTP_SERVER, ULS_SMTP_USERNAME and, maybe, ULS_SMTP_PORT,
      # ULS_SMTP_SSL, ULS_SMTP_TLS should also be specified to send email
      # notifications
      - ULS_SMTP_PASSWORD_FILE=${VOL_C_SECRETS}/MAIL_PASSWORD
      # ULS autoupdate error reporting configuration See README for ULS updater for reference
        #- ULS_ALARM_SMTP_INFO=/run/secrets/NOTIFIER_MAIL.json
        #- ULS_ALARM_EMAIL_TO=wcc-afc-swdev.pdl@broadcom.com
        #- ULS_ALARM_ALARM_INTERVAL_HR=0
        #- ULS_ALARM_SUCCESS_MAX_AGE_HR=9
        #- ULS_ALARM_BEACON_INTERVAL_HR=0
      # Rcache parameters
      - RCACHE_ENABLED=${RCACHE_ENABLED}
      - RCACHE_SERVICE_URL=http://rcache:${RCACHE_CLIENT_PORT}
      # ALS params
      - ALS_KAFKA_SERVER_ID=fs_downloader
      - ALS_KAFKA_CLIENT_BOOTSTRAP_SERVERS=${ALS_KAFKA_SERVER}:${ALS_KAFKA_CLIENT_PORT}
      # DB Creator API
      - AFC_DB_CREATOR_URL=http://${AFC_WEBUI_NAME}/fbrat/admin/CreateDb
    volumes:
      - ${VOL_H_DB}:/rat_transfer
      # May be useful in prod deployment
      # - uls_downloader_state:/uls_downloader_state
    secrets:
      - MAIL_PASSWORD
      - ULS_STATE_DB_PASSWORD
    depends_on:
      - bulk_postgres
    dns_search: [.]

  cert_db:
    image: ${PUB_REPO:-ghcr.io/open-afc-project}/cert_db:${TAG:-latest}
    depends_on:
      - ratdb
    links:
      - ratdb
      - als_kafka
    environment:
      - ALS_KAFKA_SERVER_ID=cert_db
      - ALS_KAFKA_CLIENT_BOOTSTRAP_SERVERS=${ALS_KAFKA_SERVER}:${ALS_KAFKA_CLIENT_PORT}
      - ALS_KAFKA_MAX_REQUEST_SIZE=${ALS_KAFKA_MAX_REQUEST_SIZE}
      - AFC_ALS_TOPIC_NAME=${AFC_ALS_TOPIC_NAME}
      - AFC_JSON_TOPIC_PREFIX=${AFC_JSON_TOPIC_PREFIX}
      - FLASKFILE_SQLALCHEMY_DATABASE_PASSWORD=${VOL_C_SECRETS}/RATDB_PASSWORD
      - FLASKFILE_SECRET_KEY=${VOL_C_SECRETS}/FLASK_SECRET_KEY
      - FLASKFILE_GOOGLE_APIKEY=${VOL_C_SECRETS}/GOOGLE_APIKEY
      - RATAPIFILE_CAPTCHA_SECRET=${VOL_C_SECRETS}/CAPTCHA_SECRET
      - RATAPIFILE_CAPTCHA_SITEKEY=${VOL_C_SECRETS}/CAPTCHA_SITEKEY
      - RATAPIFILE_MAIL_PASSWORD=${VOL_C_SECRETS}/MAIL_PASSWORD
      - OIDCFILE_OIDC_CLIENT_ID=${VOL_C_SECRETS}/OIDC_CLIENT_ID
      - OIDCFILE_OIDC_CLIENT_SECRET=${VOL_C_SECRETS}/OIDC_CLIENT_SECRET
    secrets:
      - RATDB_PASSWORD
      - FLASK_SECRET_KEY
      - GOOGLE_APIKEY
      - CAPTCHA_SECRET
      - CAPTCHA_SITEKEY
      - MAIL_PASSWORD
      - OIDC_CLIENT_ID
      - OIDC_CLIENT_SECRET

  rcache:
    image: ${PUB_REPO:-ghcr.io/open-afc-project}/rcache-image:${TAG:-latest}
    restart: always
    environment:
      - RCACHE_ENABLED=${RCACHE_ENABLED}
      - RCACHE_CLIENT_PORT=${RCACHE_CLIENT_PORT}
      - RCACHE_POSTGRES_DSN=${RCACHE_POSTGRES_DSN}
      - RCACHE_POSTGRES_PASSWORD_FILE=${VOL_C_SECRETS}/RCACHE_DB_PASSWORD
      - RCACHE_AFC_REQ_URL=http://${AFC_REQ_SERVER}:${AFC_REQ_SERVER_PORT}/fbrat/ap-afc/availableSpectrumInquiry?nocache=True
      - RCACHE_RULESETS_URL=http://${AFC_WEBUI_NAME}/fbrat/ratapi/v1/GetRulesetIDs
      - RCACHE_CONFIG_RETRIEVAL_URL=http://${AFC_WEBUI_NAME}/fbrat/ratapi/v1/GetAfcConfigByRulesetID
      # ALS params
      - ALS_KAFKA_SERVER_ID=rcache
      - ALS_KAFKA_CLIENT_BOOTSTRAP_SERVERS=${ALS_KAFKA_SERVER}:${ALS_KAFKA_CLIENT_PORT}
      - ALS_KAFKA_MAX_REQUEST_SIZE=${ALS_KAFKA_MAX_REQUEST_SIZE}
      - AFC_ALS_TOPIC_NAME=${AFC_ALS_TOPIC_NAME}
      - AFC_JSON_TOPIC_PREFIX=${AFC_JSON_TOPIC_PREFIX}
      # DB Creator API
      - AFC_DB_CREATOR_URL=http://${AFC_WEBUI_NAME}/fbrat/admin/CreateDb
    secrets:
      - RCACHE_DB_PASSWORD
    depends_on:
      - bulk_postgres
    dns_search: [.]

  grafana:
    image: ${PUB_REPO:-ghcr.io/open-afc-project}/grafana-image:${TAG:-latest}
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GRAFANA_ADMIN_PASSWORD_FILE=${VOL_C_SECRETS}/GRAFANA_ADMIN_PASSWORD
      - GRAFANA_DATABASE_URL=postgres://postgres:postgres@bulk_postgres/grafana
      - GRAFANA_DATABASE_PASSWORD_FILE=${VOL_C_SECRETS}/GRAFANA_DB_PASSWORD
      - GRAFANA_DS_ALS_RO_DSN=postgresql://postgres:postgres@bulk_postgres/ALS
      - GRAFANA_DS_ALS_RO_PASSWORD_FILE=${VOL_C_SECRETS}/ALS_RO_DB_PASSWORD
      - GRAFANA_DS_JSON_LOG_RO_DSN=postgresql://postgres:postgres@bulk_postgres/AFC_LOGS
      - GRAFANA_DS_JSON_LOG_RO_PASSWORD_FILE=${VOL_C_SECRETS}/ALS_JSON_LOG_RO_DB_PASSWORD
      - GRAFANA_DS_FS_STATE_RO_DSN=postgresql://postgres:postgres@bulk_postgres/fs_state
      - GRAFANA_DS_FS_STATE_RO_PASSWORD_FILE=${VOL_C_SECRETS}/ULS_STATE_RO_DB_PASSWORD
      - GRAFANA_DS_PROMETHEUS_URL=http://prometheus:9090
      - GRAFANA_DS_RCACHE_URL=http://rcache:8000
      - GRAFANA_DS_LOKI_URL=http://loki:3100
      - GRAFANA_COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME}
      # DB Creator API
      - AFC_DB_CREATOR_URL=http://${AFC_WEBUI_NAME}/fbrat/admin/CreateDb
    depends_on:
      - prometheus
      - bulk_postgres
    secrets:
      - GRAFANA_DB_PASSWORD
      - ALS_RO_DB_PASSWORD
      - ALS_JSON_LOG_RO_DB_PASSWORD
      - ULS_STATE_RO_DB_PASSWORD
      - GRAFANA_ADMIN_PASSWORD
    dns_search: [.]

  loki:
    image: ${PUB_REPO:-ghcr.io/open-afc-project}/loki-image:${TAG:-latest}
    restart: always
    dns_search: [.]

  promtail:
    image: ${PUB_REPO:-ghcr.io/open-afc-project}/promtail-image:${TAG:-latest}
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/containers:/var/lib/docker/containers
    environment:
      - GRAFANA_DS_LOKI_URL=http://loki:3100
      - GRAFANA_COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME}
    dns_search: [.]

  prometheus:
    image: ${PUB_REPO:-ghcr.io/open-afc-project}/prometheus-image:${TAG:-latest}
    restart: always
    depends_on:
      - cadvisor
    dns_search: [.]

  cadvisor:
    image:  ${PUB_REPO:-ghcr.io/open-afc-project}/cadvisor-image:${TAG:-latest}
    restart: always
    volumes:
    - /:/rootfs:ro
    - /var/run:/var/run:rw
    - /sys:/sys:ro
    - /var/lib/docker/:/var/lib/docker:ro
    - /dev/disk/:/dev/disk:ro
    dns_search: [.]

  nginxexporter:
    image: ${PUB_REPO:-ghcr.io/open-afc-project}/nginxexporter-image:${TAG:-latest}
    restart: always
    depends_on:
      - dispatcher
    dns_search: [.]

# Should be added if ULS downloader state persistent needed
# volumes:
#   uls_downloader_state:

secrets:
  ALS_DB_PASSWORD:
    file: ${VOL_H_SECRETS}/ALS_DB_PASSWORD
  ALS_JSON_LOG_DB_PASSWORD:
    file: ${VOL_H_SECRETS}/ALS_JSON_LOG_DB_PASSWORD
  CAPTCHA_SECRET:
    file: ${VOL_H_SECRETS}/CAPTCHA_SECRET
  CAPTCHA_SITEKEY:
    file: ${VOL_H_SECRETS}/CAPTCHA_SITEKEY
  FLASK_SECRET_KEY:
    file: ${VOL_H_SECRETS}/FLASK_SECRET_KEY
  GOOGLE_APIKEY:
    file: ${VOL_H_SECRETS}/GOOGLE_APIKEY
  MAIL_PASSWORD:
    file: ${VOL_H_SECRETS}/MAIL_PASSWORD
  OIDC_CLIENT_ID:
    file: ${VOL_H_SECRETS}/OIDC_CLIENT_ID
  OIDC_CLIENT_SECRET:
    file: ${VOL_H_SECRETS}/OIDC_CLIENT_SECRET
  RATDB_PASSWORD:
    file: ${VOL_H_SECRETS}/RATDB_PASSWORD
  DB_CREATOR_PASSWORD_RATDB:
    file: ${VOL_H_SECRETS}/DB_CREATOR_PASSWORD_RATDB
  DB_CREATOR_PASSWORD_BULK_POSTGRES:
    file: ${VOL_H_SECRETS}/DB_CREATOR_PASSWORD_BULK_POSTGRES
  RCACHE_DB_PASSWORD:
    file: ${VOL_H_SECRETS}/RCACHE_DB_PASSWORD
  ULS_STATE_DB_PASSWORD:
    file: ${VOL_H_SECRETS}/ULS_STATE_DB_PASSWORD
  GRAFANA_DB_PASSWORD:
    file: ${VOL_H_SECRETS}/GRAFANA_DB_PASSWORD
  ALS_RO_DB_PASSWORD:
    file: ${VOL_H_SECRETS}/ALS_RO_DB_PASSWORD
  ALS_JSON_LOG_RO_DB_PASSWORD:
    file: ${VOL_H_SECRETS}/ALS_JSON_LOG_RO_DB_PASSWORD
  ULS_STATE_RO_DB_PASSWORD:
    file: ${VOL_H_SECRETS}/ULS_STATE_RO_DB_PASSWORD
  GRAFANA_ADMIN_PASSWORD:
    file: ${VOL_H_SECRETS}/GRAFANA_ADMIN_PASSWORD
