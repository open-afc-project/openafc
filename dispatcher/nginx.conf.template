#
# Copyright Â© 2022 Broadcom. All rights reserved. The term "Broadcom"
# refers solely to the Broadcom Inc. corporate affiliate that owns
# the software below. This work is licensed under the OpenAFC Project License,
# a copy of which is included with this software program
#

http {
    log_format short_fmt '[$time_local] $request_time $upstream_response_time';
    log_format error_fmt '[$time_local] $remote_addr - $ssl_client_s_dn - $remote_user - $request_uri - $uri';
    access_log  /dev/stdout  error_fmt;
    error_log  /dev/stdout debug;


    upstream msghnd {
        # use hash algo to capture complete client address
        hash $binary_remote_addr consistent;
        server ${AFC_MSGHND_NAME}:${AFC_MSGHND_PORT};
        # idle connections preserved in the cache of each worker
        keepalive  32;
    }

    upstream webui {
        # use hash algo to capture complete client address
        hash $binary_remote_addr consistent;
        server ${AFC_WEBUI_NAME}:${AFC_WEBUI_PORT};
        # idle connections preserved in the cache of each worker
        keepalive  32;
    }

    map $scheme:$afc_https_enforce $should_redirect {
        http:TRUE 1;
        default 0;
    }

    server {
        listen 80;
        listen [::]:80 ipv6only=on;
        listen 443 ssl;
        listen [::]:443 ipv6only=on ssl;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_certificate /certificates/servers/server.cert.pem;
        ssl_certificate_key /certificates/servers/server.key.pem;

        ssl_client_certificate /certificates/clients/test_ca_crt.pem;
        ssl_verify_client optional;
        ssl_verify_depth 10;

        #ssl_stapling on;
        #ssl_stapling_verify on;


        server_name _;
        set $afc_https_enforce ${AFC_ENFORCE_HTTPS};

        if ($should_redirect = 1) {
            return 301 https://$host$request_uri;
        }

        location /fbrat/ap-afc/1.3/availableSpectrumInquiry {
           #if ($ssl_client_verify != SUCCESS) {
           #    return 403;
           #}
            # disable buffering for latency
            proxy_buffering off;
            # response to a request
            proxy_read_timeout ${AFC_PROXY_CONN_TOUT};
            # establish a connection with a proxied server
            proxy_connect_timeout 720;
            # transmit a request to a proxied server
            proxy_send_timeout 720;
            proxy_pass http://msghnd$uri$is_args$args;
            # keep connections open by changing it's header
            proxy_http_version 1.1;
            proxy_set_header   "Connection" "";
        }
        
        location /fbrat/ap-afc/1.4/availableSpectrumInquiry {
           #if ($ssl_client_verify != SUCCESS) {
           #    return 403;
           #}
            # disable buffering for latency
            proxy_buffering off;
            # response to a request
            proxy_read_timeout ${AFC_PROXY_CONN_TOUT};
            # establish a connection with a proxied server
            proxy_connect_timeout 720;
            # transmit a request to a proxied server
            proxy_send_timeout 720;
            proxy_pass http://msghnd$uri$is_args$args;
            # keep connections open by changing it's header
            proxy_http_version 1.1;
            proxy_set_header   "Connection" "";
        }

        # forbid internal tests
        location /fbrat/ap-afc/1.4/availableSpectrumInquiryInternal {
            return 403;
        }

        location / {
            if ($request_uri = "/") {
                return 301 $scheme://$http_host/fbrat;
            }
            sendfile on;
            proxy_bind $server_addr;
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_pass http://webui;
            proxy_redirect http:// $scheme://;
        }

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504;
        #error_page   500 502 503 504  /50x.html;
        #location = /50x.html {
        #    root   /usr/share/nginx/html;
        #}

        error_page 403 /403.html;
        location /403.html {
            access_log /dev/stdout error_fmt;
        }
    }
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    sendfile       on;
    tcp_nopush     on;

    keepalive_timeout  180;
}
