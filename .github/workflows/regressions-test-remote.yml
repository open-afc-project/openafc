name: Regressions test remote CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout sources
      uses: actions/checkout@v2

# get public IP
    - name: get public IP
      run: |
          echo IP4=`dig +short myip.opendns.com @resolver1.opendns.com` >> $GITHUB_ENV

# open ssh port {
    - name: Print Public IP
      run: |
        echo ${{ env.IP4 }}


    - name: Allow Security group rule to connect Github Actions to OpenAFC servers
      run: |
        aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_AFC_DEV_SEC_GROUP_ID }} --protocol tcp --port 22 --cidr ${{ env.IP4 }}/24
      env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
# }open ssh port

    - name: generate rand
      run: |
          echo RAND=`date +"D_%d_%m_%y_T_%H_%M_%S_TZ_%Z"`_hash_`git rev-parse --short HEAD` >> $GITHUB_ENV

    - name: generate  workdir
      run: |
          echo WD=/opt/afc/test/openafc-dev_${{ env.RAND }} >> $GITHUB_ENV

    - name: generate  regression dir path
      run: |
          echo REGRD=tests/regression_${{ env.RAND }} >> $GITHUB_ENV
          echo LREGRD=tests/regression >> $GITHUB_ENV

# test deployment of ssh keys to be used by ssh and rsync {
    - name: Write SSH keys
      run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY_GITHUB_AUTOMATION }}" > ~/.ssh/id_rsa
          host=${{ secrets.AFC_DEV_SERVER }}
          hosts="$(dig +short "$host" | grep -v '\.$' | sed -z 's|\n|,|g') $host"
          ssh-keyscan -H "$hosts" > ~/.ssh/known_hosts
# } test deployment of ssh keys to be used by ssh and rsync


# rsync sources{
    - name: rsync sources
      run: |
          rsync -raz --delete ${{ github.workspace }}/ ${{ secrets.SSH_USERNAME_GITHUB_AUTOMATION }}@${{ secrets.AFC_DEV_SERVER }}:/${{ env.WD }} && ssh ${{ secrets.SSH_USERNAME_GITHUB_AUTOMATION }}@${{ secrets.AFC_DEV_SERVER }} cp -a ${{ env.WD }}/tests/regression ${{ env.WD }}/${{ env.REGRD }}
# }rsync sources

# docker repo login {
    - name: docker repo login
      run: |
          ssh ${{ secrets.SSH_USERNAME_GITHUB_AUTOMATION }}@${{ secrets.AFC_DEV_SERVER }} "sh -x ${{ env.WD }}/${{ env.REGRD }}/drepo_login.sh"
# } docker repo login

# build regr test images {
    - name: build regr test images
      run: |
          ssh ${{ secrets.SSH_USERNAME_GITHUB_AUTOMATION }}@${{ secrets.AFC_DEV_SERVER }} "sh -x ${{ env.WD }}/${{ env.REGRD }}/build_imgs.sh ${{ env.WD }} ${{ env.RAND }} 1 "
# } build regr test images

# start dev srvr {
    - name: run remote srvr
      run: |
          ssh ${{ secrets.SSH_USERNAME_GITHUB_AUTOMATION }}@${{ secrets.AFC_DEV_SERVER }} "sh -x ${{ env.WD }}/${{ env.REGRD }}/run_srvr.sh ${{ env.WD }} ${{ env.RAND }} 1"
# } start dev srvr

# get dev srvr port num{
    - name: get dev srvr port num
      run: |
          echo TEST_PORT=`ssh ${{ secrets.SSH_USERNAME_GITHUB_AUTOMATION }}@${{ secrets.AFC_DEV_SERVER }} "cd ${{ env.WD }}/${{ env.REGRD }} && TAG=${{ env.RAND }} docker-compose port dispatcher 443 |sed 's/.*://'"` >> $GITHUB_ENV
# } get dev srvr port num

# open srvr test port {
    - name: Allow Security group rule to connect Github Actions to OpenAFC servers
      run: |
        aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_AFC_DEV_SEC_GROUP_ID }} --protocol tcp --port ${{ env.TEST_PORT }} --cidr ${{ env.IP4 }}/24
      env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
# } open srvr test port

# run tests {
    - name: test accessibility of WebUI
      run: |
        curl -k https://${{ secrets.AFC_DEV_SERVER }}:${{ env.TEST_PORT }}/fbrat/www/index.html

    - name: Build the regression tests docker image on client side
      run: docker build . -t afc-regression-test -f tests/Dockerfile
    - name: run ngnx-msghnd-rmq-worker path tests
      run: |
        ${{ github.workspace }}/${{ env.LREGRD }}/run_tests.sh ${{ github.workspace }} afc-regression-test ${{ secrets.AFC_DEV_SERVER }} ${{ env.TEST_PORT }}
# }run tests

# stop dev srvr {
    - name: stop dev srvr
      if: ${{ always() }}
      run: |
        ssh ${{ secrets.SSH_USERNAME_GITHUB_AUTOMATION }}@${{ secrets.AFC_DEV_SERVER }} "sh -x ${{ env.WD }}/${{ env.REGRD }}/stop_srvr.sh ${{ env.WD }} ${{ env.RAND }}"
# }stop dev srvr

# clean srvr {
    - name: clean remote srvr
      run: |
        ssh ${{ secrets.SSH_USERNAME_GITHUB_AUTOMATION }}@${{ secrets.AFC_DEV_SERVER }} "sh -x ${{ env.WD }}/${{ env.REGRD }}/clean.sh ${{ env.WD }} ${{ env.RAND }}"
# } clean srvr

# close ssh port {
    - name: remove Security group rule that was added for this test
      if: ${{ always() }}
      run: |
        aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_AFC_DEV_SEC_GROUP_ID }} --protocol tcp --port 22 --cidr ${{ env.IP4 }}/24
      env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
# } close ssh port

# close srvr test port {
    - name: remove Security group rule that was added for this test
      if: ${{ always() }}
      run: |
        aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_AFC_DEV_SEC_GROUP_ID }} --protocol tcp --port ${{ env.TEST_PORT }} --cidr ${{ env.IP4 }}/24
      env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
# } close srvr test port
