#
# Copyright (C) 2021 Broadcom. All rights reserved. The term "Broadcom"
# refers solely to the Broadcom Inc. corporate affiliate that owns
# the software below. This work is licensed under the OpenAFC Project License,
# a copy of which is included with this software program
#

# Dockerfile for Siphon - als_siphon.py script that takes log records from
# Kafka and puts them to PostgreSQL+PostGIS database (optionally creating
# necessary database before operation)

FROM python:3.12-alpine3.21

# Destination in docker image. Not a parameter (i.e. no reasons to change it)
ARG WORKDIR=/usr/app
ENV WORKDIR=$WORKDIR

RUN mkdir -p -m 777 $WORKDIR
WORKDIR $WORKDIR

# Installing Python libraries
#   Version of librdkafka-dev depends on Alpine version. confluent-kafka
#   version in requirements.txt may need to be updated on Alpine version change
RUN apk add --update --no-cache librdkafka-dev
COPY als/requirements.txt $WORKDIR/
RUN apk add --update --no-cache python3-dev build-base && \
    pip3 install --root-user-action=ignore -r $WORKDIR/requirements.txt && \
    apk del --purge python3-dev build-base && rm -f $WORKDIR/requirements.txt

COPY src/afc-packages /wd/afc-packages/
RUN pip3 install --use-pep517 --root-user-action=ignore \
        -r /wd/afc-packages/pkgs.als_siphon \
    && rm -rf /wd/afc-packages

ENV PYTHONPATH=$WORKDIR
ENV PATH=$PATH:$WORKDIR

# Comma-separated list of Kafka (bootstrap) servers, each having 'host[:port]'
# form. Port, if not specified, is 9092
ENV KAFKA_SERVERS=localhost

# Client ID to use in Kafka logs. If ends with '@' - suffixed by unique random
# string
ENV KAFKA_CLIENT_ID=siphon_@

# 'SSL' or 'PLAINTEXT'. Default is 'PLAINTEXT'
ENV KAFKA_SECURITY_PROTOCOL=

# SSL keyfile
ENV KAFKA_SSL_KEYFILE=

# SSL CA (Certificate Authority) file
ENV KAFKA_SSL_CAFILE=

# Maximum message size (default is 1MB)
ENV KAFKA_MAX_REQUEST_SIZE=

# Kafka topic name for ALS records. Default is "ALS"
# ENV AFC_ALS_TOPIC_NAME

# Prefix for Kafka topic names for JSON log records. Default is empty
# ENV AFC_JSON_TOPIC_PREFIX

# Number of month partitions ahead to create/ensure on each container start
ENV AFC_ALS_MONTH_PARTITIONS_AHEAD=6

# Connection string to ALS database (may be partial, leaving default parts).
# Hostname better be specified, as default is 'localhost'
# ENV POSTGRES_ALS_CONN_STR

# Optional name of file with password for ALS database connection string
# ENV POSTGRES_ALS_PASSWORD_FILE

# Connection string to JSON logs database (may be partial, leaving default
# parts). Hostname better be specified, as default is 'localhost'
# ENV POSTGRES_LOG_CONN_STR

# Optional name of of file with password for JSON logs database connection
# string
# ENV POSTGRES_LOG_PASSWORD_FILE

# REST API URL for Postgres database creation
ENV AFC_DB_CREATOR_URL=http://rat_server/fbrat/admin/CreateDb

# Port to serve Prometheus metrics on (none/empty is to not serve)
ENV SIPHON_PROMETHEUS_PORT=8080

# File to touch after each successful Kafka poll, used for healthcheck
ENV SIPHON_TOUCH_FILE=$WORKDIR/touch_file

# Disable SqlAlchemy compatibility warnings
ENV SQLALCHEMY_SILENCE_UBER_WARNING=1
ENV SQLALCHEMY_WARN_20=0

# Alembic config for ALS database
ENV ALEMBIC_CONFIG=$WORKDIR/als_migrations/alembic.ini
# Alembic version of last pre-alembic (first alembic) ALS database
ENV ALS_ALEMBIC_INITIAL_VERSION=4aaf4b7e53f5

# Name of file containing heyhole shape for als_query directional search
ENV KEYHOLE_TEMPLATE_FILE=$WORKDIR/keyhole_postgis.template

COPY als/als_siphon.py als/als_query.py als/utils.py \
    als/als_db_tool.py als/als_db_tool.yaml \
    tools/keyhole/keyhole_postgis.template $WORKDIR/
COPY als/als_migrations $WORKDIR/als_migrations/
COPY als/als_db_schema/ALS.sql $WORKDIR/als_db_schema/

RUN chmod a+x $WORKDIR/als_*.py

ENTRYPOINT /usr/app/als_siphon.py init_siphon \
    --kafka_servers=$KAFKA_SERVERS \
    --kafka_client_id=$KAFKA_CLIENT_ID \
    --kafka_security_protocol=$KAFKA_SECURITY_PROTOCOL \
    --kafka_ssl_keyfile=$KAFKA_SSL_KEYFILE \
    --kafka_ssl_cafile=$KAFKA_SSL_CAFILE \
    --kafka_max_partition_fetch_bytes=$KAFKA_MAX_REQUEST_SIZE \
    --als_topic=$AFC_ALS_TOPIC_NAME \
    --json_topic_prefix=$AFC_JSON_TOPIC_PREFIX \
    --als_postgres=$POSTGRES_ALS_CONN_STR \
    --als_postgres_password_file=$POSTGRES_ALS_PASSWORD_FILE \
    --log_postgres=$POSTGRES_LOG_CONN_STR \
    --log_postgres_password_file=$POSTGRES_LOG_PASSWORD_FILE \
    --prometheus_port=$SIPHON_PROMETHEUS_PORT \
    --touch_file=$SIPHON_TOUCH_FILE \
    --als_sql=$WORKDIR/als_db_schema/ALS.sql \
    --als_months_ahead=$AFC_ALS_MONTH_PARTITIONS_AHEAD \
    --als_alembic_config=$ALEMBIC_CONFIG \
    --als_alembic_initial_version=$ALS_ALEMBIC_INITIAL_VERSION

HEALTHCHECK CMD test `find $SIPHON_TOUCH_FILE -mmin -1`
