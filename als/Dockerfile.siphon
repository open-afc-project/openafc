#
# Copyright (C) 2021 Broadcom. All rights reserved. The term "Broadcom"
# refers solely to the Broadcom Inc. corporate affiliate that owns
# the software below. This work is licensed under the OpenAFC Project License,
# a copy of which is included with this software program
#

# Dockerfile for Siphon - als_siphon.py script that takes log records from
# Kafka and puts them to PostgreSQL+PostGIS database (optionally creating
# necessary database before operation)

FROM alpine:3.18

# Destination in docker image. Not a parameter (i.e. no reasons to change it)
ARG WORKDIR=/usr/app
ENV WORKDIR=$WORKDIR

RUN mkdir -p -m 777 $WORKDIR
WORKDIR $WORKDIR

RUN apk add --update --no-cache python3=~3.11 py3-sqlalchemy=~1.4 py3-pip \
    py3-psycopg2 py3-pydantic=~1.10 py3-alembic py3-lz4

# Installing Confluent Kafka Python client. Eventually, hopefully, it will be
# installed as Alpine package (thus not requiring gcc and musl-dev install)
RUN apk add --update --no-cache python3-dev=~3.11 gcc musl-dev \
    librdkafka-dev=~2.1.1 && \
    pip3 install confluent-kafka==2.1.1 && \
    apk del python3-dev gcc musl-dev

COPY als/requirements.txt $WORKDIR
RUN pip3 install --no-cache-dir --root-user-action=ignore -r requirements.txt

COPY src/afc-packages /wd/afc-packages
RUN pip3 install --use-pep517 --root-user-action=ignore \
        -r /wd/afc-packages/pkgs.als_siphon \
    && rm -rf /wd/afc-packages

ENV PYTHONPATH=$WORKDIR
ENV PATH=$PATH:$WORKDIR

# Comma-separated list of Kafka (bootstrap) servers, each having 'host[:port]'
# form. Port, if not specified, is 9092
ENV KAFKA_SERVERS=localhost
# Client ID to use in Kafka logs. If ends with '@' - suffixed by unique random
# string
ENV KAFKA_CLIENT_ID=siphon_@
# 'SSL' or 'PLAINTEXT'. Default is 'PLAINTEXT'
ENV KAFKA_SECURITY_PROTOCOL=
# SSL keyfile
ENV KAFKA_SSL_KEYFILE=
# SSL CA (Certificate Authority) file
ENV KAFKA_SSL_CAFILE=
# Maximum message size (default is 1MB)
ENV KAFKA_MAX_REQUEST_SIZE=
# Connection string to init database (may be partial, leaving default parts).
# Hostname better be specified, as default is 'localhost'
# ENV POSTGRES_INIT_CONN_STR
# Optional name of file with password for init database connection string
# ENV POSTGRES_INIT_PASSWORD_FILE
# Connection string to ALS database (may be partial, leaving default parts).
# Hostname better be specified, as default is 'localhost'
# ENV POSTGRES_ALS_CONN_STR
# Optional name of file with password for ALS database connection string
# ENV POSTGRES_ALS_PASSWORD_FILE
# Connection string to JSON logs database (may be partial, leaving default
# parts). Hostname better be specified, as default is 'localhost'
# ENV POSTGRES_LOG_CONN_STR
# Optional name of of file with password for JSON logs database connection
# string
# ENV POSTGRES_LOG_PASSWORD_FILE
# What to do if database being created already exists: 'skip', 'drop'. Default
# is to fail
ENV INIT_IF_EXISTS=skip
# Port to serve Prometheus metrics on (none/empty is to not serve)
ENV SIPHON_PROMETHEUS_PORT=8080

# Disable SqlAlchemy compatibility warnings
ENV SQLALCHEMY_SILENCE_UBER_WARNING=1
ENV SQLALCHEMY_WARN_20=0

# Alembic config for ALS database
ENV ALEMBIC_CONFIG=$WORKDIR/als_migrations/alembic.ini
# Alembic version of last pre-alembic (first alembic) ALS database
ENV ALS_ALEMBIC_INITIAL_VERSION=4aaf4b7e53f5

COPY als/als_siphon.py als/als_query.py als/utils.py $WORKDIR
COPY als/als_migrations $WORKDIR/als_migrations

RUN chmod a+x $WORKDIR/als_*.py
COPY als/ALS.sql $WORKDIR

ENTRYPOINT /usr/app/als_siphon.py init_siphon \
    --kafka_servers=$KAFKA_SERVERS \
    --kafka_client_id=$KAFKA_CLIENT_ID \
    --kafka_security_protocol=$KAFKA_SECURITY_PROTOCOL \
    --kafka_ssl_keyfile=$KAFKA_SSL_KEYFILE \
    --kafka_ssl_cafile=$KAFKA_SSL_CAFILE \
    --kafka_max_partition_fetch_bytes=$KAFKA_MAX_REQUEST_SIZE \
    --init_postgres=$POSTGRES_INIT_CONN_STR \
    --init_postgres_password_file=$POSTGRES_INIT_PASSWORD_FILE \
    --if_exists=$INIT_IF_EXISTS \
    --als_postgres=$POSTGRES_ALS_CONN_STR \
    --als_postgres_password_file=$POSTGRES_ALS_PASSWORD_FILE \
    --log_postgres=$POSTGRES_LOG_CONN_STR \
    --log_postgres_password_file=$POSTGRES_LOG_PASSWORD_FILE \
    --prometheus_port=$SIPHON_PROMETHEUS_PORT \
    --if_exists=$INIT_IF_EXISTS \
    --als_sql $WORKDIR/ALS.sql \
    --als_alembic_config=$ALEMBIC_CONFIG \
    --als_alembic_initial_version=$ALS_ALEMBIC_INITIAL_VERSION
