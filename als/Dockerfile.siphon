#
# Copyright (C) 2021 Broadcom. All rights reserved. The term "Broadcom"
# refers solely to the Broadcom Inc. corporate affiliate that owns
# the software below. This work is licensed under the OpenAFC Project License,
# a copy of which is included with this software program
#

# Dockerfile for Siphon - als_siphon.py script that takes log records from
# Kafka and puts them to PostgreSQL+PostGIS database (optionally creating
# necessary database before operation)

FROM python:3.11-slim

WORKDIR /usr/app

COPY requirements.txt /usr/app/
RUN /usr/local/bin/python3 -m pip install --upgrade pip
RUN pip3 install --no-cache-dir -r requirements.txt

ENV PYTHONPATH=/usr/app
ENV PATH=$PATH:/usr/app

# Comma-separated list of Kafka (bootstrap) servers, each having 'host[:port]'
# form. Port, if not specified, is 9092
ENV KAFKA_SERVERS=localhost
# Client ID to use in Kafka logs. If ends with '@' - suffixed by unique random
# string
ENV KAFKA_CLIENT_ID=siphon_@
# 'SSL' or 'PLAINTEXT'. Default is 'PLAINTEXT'
ENV KAFKA_SECURITY_PROTOCOL=
# SSL keyfile
ENV KAFKA_SSL_KEYFILE=
# SSL CA (Certificate Authority) file
ENV KAFKA_SSL_CAFILE=
# SSL Certificate file
ENV KAFKA_SSL_CERTFILE=
# SSL Certificate revocation file
ENV KAFKA_SSL_CRLFILE=
# True/yes/1/+ to check server hostname against certificate, False/no/0/- to
# not to. Default is to check
ENV KAFKA_SSL_CHECK_HOSTNAME=True
# Maximum message size (default is 1MB)
ENV KAFKA_MAX_REQUEST_SIZE=
# PostgreSQL server hostname
ENV POSTGRES_HOST=localhost
# PostgreSQL server port
ENV POSTGRES_PORT=5432
# Parameters (name, user, password, options) of initial database - database to
# connect to to create other databases
ENV POSTGRES_INIT_DB=postgres
ENV POSTGRES_INIT_USER=postgres
ENV POSTGRES_INIT_PASSWORD=postgres
ENV POSTGRES_INIT_OPTIONS=
# Parameters (name, user, password, options) of database for
# Request/Response/Config logs
ENV POSTGRES_ALS_DB=ALS
ENV POSTGRES_ALS_USER=postgres
ENV POSTGRES_ALS_PASSWORD=postgres
ENV POSTGRES_ALS_OPTIONS=
# Parameters (name, user, password, options) of database for JSON logs
ENV POSTGRES_LOG_DB=AFC_LOGS
ENV POSTGRES_LOG_USER=postgres
ENV POSTGRES_LOG_PASSWORD=postgres
ENV POSTGRES_LOG_OPTIONS=
# What to do if database being created already exists: 'skip', 'drop'. Default
# is to fail
ENV INIT_IF_EXISTS=skip
# True/yes/1/+ to print siphon progress/heartbeat information to stdout,
# False/no/0/- to not to. Default is not to print
ENV SIPHON_PROGRESS=false

COPY als_siphon.py /usr/app
COPY ALS.sql /usr/app
COPY als_query.py /usr/app

ENTRYPOINT /usr/app/als_siphon.py init_siphon \
    --kafka_servers=$KAFKA_SERVERS \
    --kafka_client_id=$KAFKA_CLIENT_ID \
    --kafka_security_protocol=$KAFKA_SECURITY_PROTOCOL \
    --kafka_ssl_keyfile=$KAFKA_SSL_KEYFILE \
    --kafka_ssl_check_hostname=$KAFKA_SSL_CHECK_HOSTNAME \
    --kafka_ssl_cafile=$KAFKA_SSL_CAFILE \
    --kafka_ssl_certfile=$KAFKA_SSL_CERTFILE \
    --kafka_ssl_crlfile=$KAFKA_SSL_CRLFILE \
    --kafka_max_partition_fetch_bytes=$KAFKA_MAX_REQUEST_SIZE \
    --init_postgres=postgresql://${POSTGRES_INIT_USER}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_INIT_DB}${POSTGRES_INIT_OPTIONS} \
    --init_postgres_password=$POSTGRES_INIT_PASSWORD \
    --if_exists=$INIT_IF_EXISTS \
    --als_postgres=postgresql://${POSTGRES_ALS_USER}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_ALS_DB}${POSTGRES_ALS_OPTIONS} \
    --als_postgres_password=$POSTGRES_ALS_PASSWORD \
    --log_postgres=postgresql://${POSTGRES_LOG_USER}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_LOG_DB}${POSTGRES_LOG_OPTIONS} \
    --log_postgres_password=$POSTGRES_LOG_PASSWORD \
    --progress=$SIPHON_PROGRESS \
    --if_exists=$INIT_IF_EXISTS \
    --als_sql /usr/app/ALS.sql
