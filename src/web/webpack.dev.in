const path = require("path");
const merge = require("webpack-merge");
const common = require("@ADD_DIST_LIB_SOURCECOPY@/webpack.common.js");
const HardSourceWebpackPlugin = require("hard-source-webpack-plugin");
const HtmlWebpackPlugin = require("html-webpack-plugin");

const HOST = process.env.HOST || "localhost";
const PORT = process.env.PORT || "9000";

module.exports = merge(common, {
  mode: "development",
  devtool: "source-map",
  devServer: {
    contentBase: "@CMAKE_CURRENT_BINARY_DIR@",
    host: HOST,
    port: PORT,
    compress: true,
    inline: true,
    historyApiFallback: true,
    hot: true,
    overlay: true,
    open: true
  },
  plugins: [
    new HtmlWebpackPlugin({
      template: "@ADD_DIST_LIB_SOURCECOPY@/src/index.html",
      title: 'AFC Development'
    }),
    new HardSourceWebpackPlugin({
      // Either an absolute path or relative to webpack's options.context.
      cacheDirectory: '@CMAKE_CURRENT_BINARY_DIR@/hard-source-cache/[confighash]',
      // Either a string of object hash function given a webpack config.
      configHash: function(webpackConfig) {
        // node-object-hash on npm can be used to build this.
        return require('node-object-hash')({sort: false}).hash(webpackConfig);
      },
      // Either false, a string, an object, or a project hashing function.
      environmentHash: {
        root: process.cwd(),
        directories: [],
        files: ['package-lock.json', 'yarn.lock'],
      },
      // An object.
      info: {
        // 'none' or 'test'.
        mode: 'none',
        // 'debug', 'log', 'info', 'warn', or 'error'.
        level: 'debug',
      },
      // Clean up large, old caches automatically.
      cachePrune: {
        // Caches younger than `maxAge` are not considered for deletion. They must
        // be at least this (default: 2 days) old in milliseconds.
        maxAge: 2 * 24 * 60 * 60 * 1000,
        // All caches together must be larger than `sizeThreshold` before any
        // caches will be deleted. Together they must be at least this
        // (default: 50 MB) big in bytes.
        sizeThreshold: 50 * 1024 * 1024
      },
    })
  ],
  module: {
    rules: [
      {
        test: /\.css$/,
        include: [
          "@ADD_DIST_LIB_SOURCECOPY@/src",
          "@ADD_DIST_LIB_SOURCECOPY@/node_modules/patternfly",
          "@ADD_DIST_LIB_SOURCECOPY@/node_modules/@patternfly/patternfly",
          "@ADD_DIST_LIB_SOURCECOPY@/node_modules/@patternfly/react-styles/css",
          "@ADD_DIST_LIB_SOURCECOPY@/node_modules/@patternfly/react-core/dist/styles/base.css",
          "@ADD_DIST_LIB_SOURCECOPY@/node_modules/@patternfly/react-core/dist/esm/@patternfly/patternfly",
          "@ADD_DIST_LIB_SOURCECOPY@/node_modules/@patternfly/react-core"
        ],
        use: ["style-loader", "css-loader"]
      }
    ]
  }
});
