const path = require("path");
const TsconfigPathsPlugin = require("tsconfig-paths-webpack-plugin");

const BG_IMAGES_DIRNAME = "bgimages";

module.exports = {
  entry: {
    app: "@ADD_DIST_LIB_SOURCECOPY@/src/index.tsx"
  },
  module: {
    rules: [
      {
        test: /\.(tsx|ts)?$/,
        include: "@ADD_DIST_LIB_SOURCECOPY@/src",
        use: [
          {
            loader: "ts-loader",
            options: {
              transpileOnly: true,
              experimentalWatchApi: true,
            }
          }
        ]
      },
      {
        test: /\.(svg|ttf|eot|woff|woff2)$/,
        // only process modules with this loader
        // if they live under a "fonts" or "pficon" directory
        include: [
          "@ADD_DIST_LIB_SOURCECOPY@/node_modules/patternfly/dist/fonts",
          "@ADD_DIST_LIB_SOURCECOPY@/node_modules/@patternfly/react-core/dist/styles/assets/fonts",
          "@ADD_DIST_LIB_SOURCECOPY@/node_modules/@patternfly/react-core/dist/styles/assets/pficon",
        ],
        use: {
          loader: "file-loader",
          options: {
            // Limit at 50k. larger files emited into separate files
            limit: 5000,
            outputPath: "fonts",
            name: "[name].[ext]",
          }
        }
      },
      {
        test: /\.svg$/,
        include: input => input.indexOf("background-filter.svg") > 1,
        use: [
          {
            loader: "url-loader",
            options: {
              limit: 5000,
              outputPath: "svgs",
              name: "[name].[ext]",
            }
          }
        ]
      },
      {
        test: /\.svg$/,
        // only process SVG modules with this loader if they live under a "bgimages" directory
        // this is primarily useful when applying a CSS background using an SVG
        include: input => input.indexOf(BG_IMAGES_DIRNAME) > -1,
        use: {
          loader: "svg-url-loader",
          options: {}
        }
      },
      {
        test: /\.svg$/,
        // only process SVG modules with this loader when they don"t live under a "bgimages",
        // "fonts", or "pficon" directory, those are handled with other loaders
        include: input => (
          (input.indexOf(BG_IMAGES_DIRNAME) === -1) &&
          (input.indexOf("fonts") === -1) &&
          (input.indexOf("background-filter") === -1) &&
          (input.indexOf("pficon") === -1)
        ),
        use: {
          loader: "raw-loader",
          options: {}
        }
      },
      {
        test: /\.(jpg|jpeg|png|gif)$/i,
        include: [
          "@ADD_DIST_LIB_SOURCECOPY@/src",
          "@ADD_DIST_LIB_SOURCECOPY@/node_modules/patternfly",
          "@ADD_DIST_LIB_SOURCECOPY@/node_modules/@patternfly/patternfly/assets",
          "@ADD_DIST_LIB_SOURCECOPY@/node_modules/@patternfly/react-core/dist/styles/assets/images",
          "@ADD_DIST_LIB_SOURCECOPY@/node_modules/@patternfly/react-styles/css/assets/images",
          "@ADD_DIST_LIB_SOURCECOPY@/node_modules/@patternfly"
        ],
        use: [
          {
            loader: "url-loader",
            options: {
              limit: 5000,
              outputPath: "images",
              name: "[name].[ext]",
            }
          }
        ]
      }
    ]
  },
  output: {
    filename: "[name].bundle.js",
    path: "@CMAKE_CURRENT_BINARY_DIR@/www",
    publicPath: ""
  },
  resolve: {
    extensions: [".ts", ".tsx", ".js"],
    plugins: [
      new TsconfigPathsPlugin({
        configFile: "@ADD_DIST_LIB_SOURCECOPY@/tsconfig.json"
      })
    ],
    symlinks: false,
    cacheWithContext: false
  },
};

