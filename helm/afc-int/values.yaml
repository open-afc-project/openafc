# Copyright (C) 2022 Broadcom. All rights reserved.
# The term "Broadcom" refers solely to the Broadcom Inc. corporate affiliate
# that owns the software below.
# This work is licensed under the OpenAFC Project License, a copy of which is
# included with this software program.

---

# Default values for afc-int chart
# Please use configuration-specific value files (e.g. values-k3d.yaml for
# k3d configuration) to augment/override values defined here

# Global name overrides

# App name to use instead of default Chart.Name
# appNameOverride:

# Dictionary of external IPs (keys are names, values are IPs) - if used should
# be defined in some override
externalIps:
  # Ingress of internal cluster
  int-ingress: null
  # RabbitMQ AMQP of internal cluster
  int-rmq: null

# Dictionary of image repositories. Keys may be any - they are used in
# component definition. Fields are:
# path Repository path
# pushPath Repsoitory to push images to (default is same as 'path'). This field
# is used by image push script, not by helmcharts and most likely be defined in
# site-specific values.yaml override
# pullSecrets List of names of pull secrets
imageRepositories:
  public:
    path: ghcr.io/open-afc-project
    pullSecrets: []
  private:
    path: ghcr.io/open-afc-project
    pullSecrets: []

# Dictionary of security contexts. Keys are used in component definitions (and
# may be any). Values are the same as in securityContext dictionaries
# (runAsUser, runAsGroup, fsGroup, readOnlyRootFilesystem, capabilities.add,
# capabilities.drop)
securityContexts:
  none: {}
  readOnly:
    readOnlyRootFilesystem: true

# Dictionary of environment variable grooups, used by several components.
# Values are dictionaries.
# Some syntax conventions introduced to properly render values without helm
# trickery or literal repetitions:
#  - If variable name ends with @S, its value rendered as string verbatim (@S
#    is trimmed from variable name)
#  - If variable name ends with @I, it is rendered as integer, thus avoiding
#    rendering big integers as floating points (@I is trimmed from variable
#    name)
#  - {{host:<COMPONENTNAME>}} rendered as hostname for given component (e.g.
#    as of time of this writing '{{host:rat-server}}' rendered as 'webui')
#  - {{port:<COMPONENTNAME>:<PORTNAME>}} rendered as service port number of
#    port of - given name of given component (e.g. as of time of this writing
#    '{{port:objst:fileStorage}}' rendered as '5000')
#  - {{containerPort:<COMPONENTNAME>:<PORTNAME>}} ditto, but container (aka
#    target) port number is rendered
#  - {{staticVolumeMount:<COMPONENTNAME>:<STATICMOUNTNAME>[:<IFABSENT>]}}
#    rendered as mount directory for given static volume.
#    <IFABSENT> describes what to do if volume data is empty/absent:
#    - 'optional' - don't add this environment variable
#    - 'nullable' - set entire value to empty string
#    - 'required' - abort rendering (default)
#  - {{secretFile:<EXTERNALSECRETNAME>[:<IFABSENT>]}}
#    rendered as  full name of file given external secret mounted to
#    <IFABSENT> - see above
#  - {{secretProperty:<EXTERNALSECRET>[:<IFABSENT>]}} 'property' of external
#    secret with given <EXTERNALSECRET> name (i.e. name of secret file or
#    secret environment variable). <IFABSENT> describes what to do if secret or
#    'property' field of secret definition is absent (see above for values)
#  - {{ip:<IPKEY>[:<IFABSENT>]}} IP address by key in 'externalIps'. <IFABSENT>
#    describes what to do if name is valid, but IP name is not defined (see
#    above for values)
#  - {{sameAs:<SHAREDENVKEY>:<ENTRY>[:<IFABSENT>]}} Same value as another entry
#    in another shared environment block. <IFABSENT> describes what to do if
#    referred value is absent (see above for values)
sharedEnv:
  # Flask config parameters defined in config/ratapi.conf. Config settings
  # passed via environment variables should be prefixed with FLASK_, passed via
  # filename environment variables should be prefixed wiyth FLASKFILE_
  flask-conf:
    FLASK_SQLALCHEMY_DATABASE_URI: >-
      postgresql://postgres:postgres@{{host:ratdb}}:{{port:ratdb:ratdb}}/fbrat
    FLASKFILE_SQLALCHEMY_DATABASE_PASSWORD: >-
      {{secretFile:ratdb-password:optional}}
    FLASKFILE_SECRET_KEY: >-
      {{secretFile:flask-secret-key:optional}}
    FLASKFILE_GOOGLE_APIKEY: >-
      {{secretFile:google-apikey:optional}}
    FLASK_USER_EMAIL_SENDER_EMAIL: admin@afc_please_override.com
    FLASK_AFC_MSGHND_RATAFC_TOUT: 180
  # Flask config parameters retrieved by RatApiConfigurator (should be defined
  # in site-specific values.yaml overrides and/or in secrets). Config settings
  # passed via environment variables should be given as is, passed via
  # filename environment variables should be prefixed with RATAPIFILE_
  ratapi-configurator:
    REGISTRATION_APPROVE_LINK: ""
    REGISTRATION_DEST_EMAIL: ""
    REGISTRATION_DEST_PDL_EMAIL: ""
    REGISTRATION_SRC_EMAIL: ""
    RATAPIFILE_MAIL_PASSWORD: >-
      {{secretFile:ratapi-mail-password:optional}}
    MAIL_USERNAME: ""
    MAIL_SERVER: ""
    MAIL_PORT: ""
    MAIL_USE_TLS: ""
    MAIL_USE_SSL: ""
    USE_CAPTCHA: ""
    RATAPIFILE_CAPTCHA_SECRET: >-
      {{secretFile:ratapi-captcha-secret:optional}}
    RATAPIFILE_CAPTCHA_SITEKEY: >-
      {{secretFile:ratapi-captcha-sitekey:optional}}
    CAPTCHA_VERIFY: ""
    USER_APP_NAME: AFC
  # Flask config parameters retrieved by OIDCConfigurator (should be defined
  # in site-specific values.yaml overrides and/or in secrets). Config settings
  # passed via environment variables should be given as is, passed via
  # filename environment variables should be prefixed with OIDCFILE_
  oidc-configurator:
    OIDC_LOGIN: "False"
    OIDCFILE_OIDC_CLIENT_ID: >-
      {{secretFile:oidc-client-id:optional}}
    OIDCFILE_OIDC_CLIENT_SECRET: >-
      {{secretFile:oidc-client-secret:optional}}
    OIDC_DISCOVERY_URL: ""
  # Common environment variables for objst container(s)
  objst-common:
    AFC_OBJST_PORT: "{{port:objst:fileStorage}}"
  # Environment variables for clients of objst service
  objst-client:
    AFC_OBJST_SCHEME: HTTP
    AFC_OBJST_HOST: "{{host:objst}}"
  # Environment variables for Celery clients of rmq service
  celery-client:
    BROKER_TYPE: external
    BROKER_FQDN: "{{host:rmq}}"
  # Environment variables for ALS clients service
  als-client:
    ALS_KAFKA_MAX_REQUEST_SIZE@I: 10485760
    ALS_KAFKA_CLIENT_BOOTSTRAP_SERVERS: >-
      {{host:als-kafka}}:{{port:als-kafka:kafka}}
  # Environment variables common to als-kafka and als_siphon
  als-kafka-common:
    KAFKA_MAX_REQUEST_SIZE@I: 10485760
  # Common Environment variables for Rcache container(s) and clients of Rcache
  # service
  rcache-common:
    RCACHE_ENABLED: "True"
    RCACHE_POSTGRES_DSN: >-
      postgresql://postgres:postgres@{{host:bulk-postgres}}/rcache
    RCACHE_POSTGRES_PASSWORD_FILE: "{{secretFile:rcache-db-password:optional}}"
  # Environment variables for Rcache service clients
  rcache-client:
    RCACHE_SERVICE_URL: "http://{{host:rcache}}:{{port:rcache:rcache}}"
    RCACHE_RMQ_DSN: >-
      amqp://rcache:rcache@{{host:rmq}}:{{port:rmq:amqp}}/rcache

# Dictionary of static (non-templated and non-secret) volume definitions.
# Indexed by volume names
staticVolumes:
  # All must be overridden
  rat_transfer:
    # hostPath:
    #   path: /opt/afc/databases/rat_transfer
    #   type: Directory
  pipe:
    # hostPath:
    #   # Path better be overridden, type set to bypass creation if overridden
    #   path: /tmp
    #   type: DirectoryOrCreate

# Dictionary of components. Component roughly corresponds to Docker Compose
# service. Keys in dictionary are Docker Compose service names, plus there is
# 'default' component containing default values for certain parameters.
# Properties are:
#   imageName Image name (without repository and tag). Empty means component
#           should not be used (like Postgres components in GCP)
#   imageRepositoryKey Key in .Values.imageRepositories
#   imageRepositoryKeyOverride Key in .Values.imageRepositories that, if
#           specified, overrides imageRepositoryKey
#   imageTag Image tag. Default is .Chart.appVersion
#   imagePullPolicy Image pull policy
#   service Stuff related to service. Properties are:
#     type Service type
#     hostname Hostname to use in Kubernetes service. Default is component name
#     loadBalancerIpKey Key in externalIps of loadBalancerIP value. Ignored if
#             value is empty/null
#     annotations Dictionary of service annotations
#     selector Pod selector dictionary
#   initialReplicas Initial replica count
#   serviceAccount Name of service account. Empty/absent to use default
#   securityContextKey Key in securityContexts
#   ports Dictionary of TCP port descriptors. Keys are port names, values have
#           the following structure:
#     servicePort Port exposed by service. Absent if not for exposing by
#             service
#     containerPort Port exposed by container. Default is same as servicePort
#     nodePort Node port to allocate for service that may be designated as
#             NodePort. Names of such ports better be unique (as it simplifies
#             wrapper scripts' interface)
#     appProtocol Protocol hint
#   containerResources Kubernetes container resources (Dictionary with
#           'requests' and 'limits' keys)
#   pvc Persistent Volume Claim data. Properties:
#     name PVC name
#     accessMode Access mode (ReadWriteOnce, ReadOnlyMany, ReadWriteMany, or
#             ReadWriteOncePod)
#     mountPath Mount path inside container
#     resources PVC resources (has 'requests', etc. properties)
#   env Dictionary of individual component-specific environment variables
#   sharedEnvKeys List of sharedEnv keys (keys into sharedEnv dictionary)
#           to include into environment
#   staticVolumeMounts Dictionary of mount points of used static
#           (non-templated, non-secret) volumes, indexed by staticVolumes
#           dictionary keys
#   mountedSecrets List of external secret names (keys in externalSecrets
#           dictionary) to mount
#   metrics Where to look for Prometheus metrics. Contains single entry in
#           podmonitor's podMetricsEndpoints key (port, path, params, etc.)
#     port Port name
#     path Path to metric. Default is /metrics
#   hpa Data for horizontal Pod Autoscaler
#     minReplicas Minimum number of replicas. Optional, default is 1
#     maxReplicas Maximum number of replicas
#     metric Type-specific part of HPA manifest's' spec.metrics element (i.e.
#             'type' field derived from top-level key)
#     behavior Behavior clause of HPA manifest. Optional. Default is to scale
#             immediately, without looking back
#   livenessProbe livenessProbe clause. Liveness is a probe Kubernetes uses to
#           decide if container must be restarted
#   readinessProbe readinessProbe clause. Readiness is a probe Kubernetes uses
#           to decide if container is able to acept traffic (or should be
#           excluded from LoadBalancer)
#   startupProbe startupProbe clause. Startup is a probe Kubernetes uses to
#           decide if readiness probe may already be used (or container is
#           still starting)
#   ingress Parameters of ingress:
#     anotations Annotations dictionary for Ingress manifest
#     rules List of structures with materials to ingress rules. Structures have
#             properties:
#       path Path for rule
#       pathType (Prefix, ImplementationSpecific or Exact). Default is Prefix
#       portKey Name of target port
#   noIngress True to ignore 'ingress' even if it is present
components:
  default:
    service:
      type: ClusterIP
    initialReplicas: 1
    imagePullPolicy: Always
    serviceAccount:
    securityContextKey: none
    pvc:
      accessMode: ReadWriteOnce
  ratdb:
    imageName: ratdb-image
    imageRepositoryKey: public
    ports:
      ratdb:
        servicePort: 5432
        nodePort: 31432
    pvc:
      name: postgresData
      mountPath: /var/lib/postgresql/data
      resources:
        requests:
          storage: 1Gi
  rmq:
    imageName: rmq-image
    imageRepositoryKey: public
    service:
      loadBalancerIpKey: int-rmq
    ports:
      amqp:
        servicePort: 5672
      metrics:
        containerPort: 15692
    metrics:
      port: metrics
      path: /metrics/detailed
      params:
        vhost:
          - fbrat
          - rcache
        family:
          - queue_coarse_metrics
    containerResources:
      requests:
        memory: 200Mi
  dispatcher:
    imageName: dispatcher-image
    imageRepositoryKey: public
    service:
      type: LoadBalancer
    env:
      AFC_SERVER_NAME: _
      AFC_ENFORCE_HTTPS: "True"
      AFC_ENFORCE_MTLS: "False"
      AFC_MSGHND_NAME: "{{host:msghnd}}"
      AFC_MSGHND_PORT: "{{port:msghnd:msghnd}}"
      AFC_WEBUI_NAME: "{{host:rat-server}}"
      AFC_WEBUI_PORT: "{{port:rat-server:rat-server}}"
    sharedEnvKeys:
      - objst-client
      - objst-common
    ports:
      http:
        servicePort: 80
        nodePort: 30080
      https:
        servicePort: 443
        nodePort: 30443
      status:
        servicePort: 8080
      disp-prometheus:
        servicePort: 9090
        nodePort: 31091
      disp-grafana:
        servicePort: 3000
        nodePort: 31001
  rat-server:
    imageName: afc-server
    imageRepositoryKey: private
    service:
      hostname: webui
    ports:
      rat-server:
        servicePort: 80
        nodePort: 30081
      https:
        servicePort: 443
    containerResources:
      requests:
        memory: 200Mi
    env:
      ALS_KAFKA_SERVER_ID: rat_server
    sharedEnvKeys:
      - flask-conf
      - ratapi-configurator
      - oidc-configurator
      - celery-client
      - objst-client
      - objst-common
      - als-client
      - rcache-client
      - rcache-common
    staticVolumeMounts:
      rat_transfer: /mnt/nfs/rat_transfer
      pipe: /pipe
    mountedSecrets:
      - ratdb-password
      - flask-secret-key
      - google-apikey
      - ratapi-captcha-secret
      - ratapi-captcha-sitekey
      - ratapi-mail-password
      - oidc-client-id
      - oidc-client-secret
      - rcache-db-password
    ingress:
      rules:
        - path: /fbrat/ap-afc/availableSpectrumInquirySec
          portKey: rat-server
        - path: /fbrat/ratapi/v1/files
          portKey: rat-server
        - path: /fbrat
          portKey: rat-server
  msghnd:
    imageName: afc-msghnd
    imageRepositoryKey: private
    ports:
      msghnd:
        servicePort: 80
        containerPort: 8000
        nodePort: 30082
    metrics:
      port: msghnd
      path: /fbrat/metrics
    containerResources:
      requests:
        memory: 1200Mi
    env:
      ALS_KAFKA_SERVER_ID: msghnd
    sharedEnvKeys:
      - flask-conf
      - ratapi-configurator
      - oidc-configurator
      - celery-client
      - objst-client
      - objst-common
      - als-client
      - rcache-client
      - rcache-common
    mountedSecrets:
      - ratdb-password
      - flask-secret-key
      - google-apikey
      - ratapi-captcha-secret
      - ratapi-captcha-sitekey
      - ratapi-mail-password
      - oidc-client-id
      - oidc-client-secret
      - rcache-db-password
    ingress:
      annotations:
        nginx.ingress.kubernetes.io/proxy-read-timeout: "720"
        nginx.ingress.kubernetes.io/proxy-connect-timeout: "720"
        nginx.ingress.kubernetes.io/client-body-timeout: "720"
        nginx.ingress.kubernetes.io/client-header-timeout: "720"
        nginx.ingress.kubernetes.io/upstream-keepalive-timeout: "720"
        nginx.ingress.kubernetes.io/keep-alive: "720"
      rules:
        - path: /fbrat/ap-afc/availableSpectrumInquiry
          portKey: msghnd
        - path: /fbrat/ap-afc/healthy
          portKey: msghnd
  objst:
    imageName: objstorage-image
    imageRepositoryKey: public
    ports:
      fileStorage:
        servicePort: 5000
      historyView:
        servicePort: 4999
    containerResources:
      requests:
        memory: 500Mi
    env:
      AFC_OBJST_HIST_PORT: "{{port:objst:historyView}}"
      AFC_OBJST_LOCAL_DIR: /storage
    sharedEnvKeys:
      - flask-conf
      - ratapi-configurator
      - oidc-configurator
      - objst-common
    mountedSecrets:
      - ratdb-password
      - flask-secret-key
      - google-apikey
      - ratapi-captcha-secret
      - ratapi-captcha-sitekey
      - ratapi-mail-password
      - oidc-client-id
      - oidc-client-secret
    ingress:
      rules:
        - path: /certificate
          portKey: fileStorage
        - path: /objst_healthy
          portKey: fileStorage
  worker:
    imageName: afc-worker
    imageRepositoryKey: private
    containerResources:
      requests:
        memory: 4500Mi
    env:
      AFC_WORKER_CELERY_WORKERS: rat_1
      # Number of engines per worker by default is equal to number of CPUs
      # (`nproc`). It can't be limited with containerResources.limits.cpu,
      # hence must be explicitly set with AFC_WORKER_CELERY_CONCURRENCY
      AFC_WORKER_CELERY_CONCURRENCY: 2
      AFC_AEP_ENABLE: 1
      AFC_AEP_DEBUG: 1
      AFC_AEP_REAL_MOUNTPOINT: >-
        {{staticVolumeMount:worker:rat_transfer}}/3dep/1_arcsec
    sharedEnvKeys:
      - celery-client
      - objst-client
      - objst-common
      - als-client
      - rcache-client
      - rcache-common
    staticVolumeMounts:
      rat_transfer: /mnt/nfs/rat_transfer
      pipe: /pipe
    hpa:
      maxReplicas: 10
      metric:
        external:
          metric:
            # Number of outstanding AFC Engine (per pod, because of
            # 'AverageValue' type). This metric exists in two flavors:
            #   - active_engine_requests_msghnd - Number of incomplete AFC
            #             requests msghnd put to worker
            #   - active_engine_requests_rabbitmq - Number of incomplete
            #             requests in Celery queue
            #  Both are (or should be) equivalent
            name: active_engine_requests_rabbitmq
          target:
            type: AverageValue
            # 1700m is 1.7 in HPA parlance
            averageValue: 1700m
      behavior:
        scaleUp:
          stabilizationWindowSeconds: 0
          policies:
            - type: Pods
              value: 4
              periodSeconds: 30
        scaleDown:
          stabilizationWindowSeconds: 120
          policies:
            - type: Pods
              value: 4
              periodSeconds: 30
            - type: Percent
              value: 10
              periodSeconds: 30
  als-kafka:
    imageName: als-kafka-image
    imageRepositoryKey: public
    ports:
      kafka:
        servicePort: 9092
    containerResources:
      requests:
        memory: 500Mi
    env:
      KAFKA_ADVERTISED_HOST: "{{host:als-kafka}}"
      KAFKA_CLIENT_PORT: "{{port:als-kafka:kafka}}"
    sharedEnvKeys:
      - als-kafka-common
  als-siphon:
    imageName: als-siphon-image
    imageRepositoryKey: public
    ports:
      metrics:
        containerPort: 8080
    metrics:
      port: metrics
    containerResources:
      requests:
        memory: 100Mi
    env:
      KAFKA_SERVERS: "{{host:als-kafka}}:{{port:als-kafka:kafka}}"
      INIT_IF_EXISTS: skip
      POSTGRES_INIT_CONN_STR: >-
        postgresql://postgres:postgres@{{host:bulk-postgres}}:{{port:bulk-postgres:bulk-postgres}}/postgres
      POSTGRES_ALS_CONN_STR: >-
        postgresql://postgres:postgres@{{host:bulk-postgres}}:{{port:bulk-postgres:bulk-postgres}}/ALS
      POSTGRES_LOG_CONN_STR: >-
        postgresql://postgres:postgres@{{host:bulk-postgres}}:{{port:bulk-postgres:bulk-postgres}}/AFC_LOGS
      POSTGRES_INIT_PASSWORD_FILE: "{{secretFile:postgres-password:optional}}"
      POSTGRES_ALS_PASSWORD_FILE: "{{secretFile:als-db-password:optional}}"
      POSTGRES_LOG_PASSWORD_FILE: >-
        {{secretFile:als-json-log-db-password:optional}}
    sharedEnvKeys:
      - als-kafka-common
    mountedSecrets:
      - postgres-password
      - als-db-password
      - als-json-log-db-password
  bulk-postgres:
    imageName: bulk-postgres-image
    imageRepositoryKey: public
    ports:
      bulk-postgres:
        servicePort: 5432
        nodePort: 31433
    pvc:
      name: postgresData
      mountPath: /var/lib/postgresql/data
      resources:
        requests:
          storage: 100Mi
  uls-downloader:
    imageName: uls-downloader
    imageRepositoryKey: public
    env:
      ULS_AFC_URL: >-
        http://{{host:msghnd}}:{{port:msghnd:msghnd}}/fbrat/ap-afc/availableSpectrumInquiryInternal?nocache=True
      ULS_DELAY_HR: 0
      ULS_SERVICE_STATE_DB_DSN: >-
        postgresql://postgres:postgres@{{host:bulk-postgres}}/fs_state
      ULS_SERVICE_STATE_DB_PASSWORD_FILE: >-
        {{secretFile:uls-state-db-password:optional}}
      ULS_PROMETHEUS_PORT: 8000
      ULS_SMTP_SERVER: >-
        {{sameAs:ratapi-configurator:MAIL_SERVER:optional}}
      ULS_SMTP_PORT: >-
        {{sameAs:ratapi-configurator:MAIL_PORT:optional}}
      ULS_SMTP_USERNAME: >-
        {{sameAs:ratapi-configurator:MAIL_USERNAME:optional}}
      ULS_SMTP_PASSWORD_FILE: >-
        {{secretFile:ratapi-mail-password:optional}}
      ULS_SMTP_SSL: >-
        {{sameAs:ratapi-configurator:MAIL_USE_SSL:optional}}
      ULS_SMTP_TLS: >-
        {{sameAs:ratapi-configurator:MAIL_USE_TLS:optional}}
    sharedEnvKeys:
      - rcache-client
      - rcache-common
    staticVolumeMounts:
      rat_transfer: /rat_transfer
    mountedSecrets:
      - ratapi-mail-password
      - uls-state-db-password
    ports:
      metrics:
        containerPort: 8000
    metrics:
      port: metrics
  cert-db:
    imageName: cert_db
    imageRepositoryKey: public
    sharedEnvKeys:
      - flask-conf
      - ratapi-configurator
      - oidc-configurator
      - als-client
    mountedSecrets:
      - ratdb-password
      - flask-secret-key
      - google-apikey
      - ratapi-captcha-secret
      - ratapi-captcha-sitekey
      - ratapi-mail-password
      - oidc-client-id
      - oidc-client-secret
  rcache:
    imageName: rcache-image
    imageRepositoryKey: public
    ports:
      rcache:
        servicePort: 8000
        nodePort: 30083
    containerResources:
      requests:
        memory: 100Mi
    env:
      RCACHE_CLIENT_PORT: "{{port:rcache:rcache}}"
      RCACHE_AFC_REQ_URL: >-
        http://{{host:msghnd}}:{{port:msghnd:msghnd}}/fbrat/ap-afc/availableSpectrumInquiry?nocache=True
      RCACHE_RULESETS_URL: >-
        http://{{host:rat-server}}/fbrat/ratapi/v1/GetRulesetIDs
      RCACHE_CONFIG_RETRIEVAL_URL: >-
        http://{{host:rat-server}}/fbrat/ratapi/v1/GetAfcConfigByRulesetID
    sharedEnvKeys:
      - rcache-common
      - als-client
    mountedSecrets:
      - rcache-db-password
  grafana:
    imageName: grafana-image
    imageRepositoryKey: public
    ports:
      grafana:
        servicePort: 3000
        nodePort: 31000
    ingress:
      rules:
        - path: /grafana
          pathType: Prefix
          portKey: grafana
  nginxexporter:
    imageName: nginxexporter-image
    imageRepositoryKey: public
    ports:
      http:
        servicePort: 9113
    metrics:
      port: http
  prometheus:
    # Only to create optional nodeport service on k3d. Other aspects managed by
    # prometheus-operator
    service:
      selector:
        prometheus: main
    ports:
      prometheus:
        servicePort: 9090
        nodePort: 31090
  # Only to have proper label in its servicemonitor
  cadvisor: {}

# Dictionary of secret store descriptors
# Keys used as secret store name (after conversion to RFC1123)
# Properties are:
#   provider - provider clause as per SecretStore/ClusterSecretStore
#   structured - can be:
#    True If secrets in remote secret store have key-value form (e.g.
#            Kubernetes as External Secrets backend). For such stores
#            'property' (if nonempty) used to retrieve secret value from
#            external secret
#    False If values of secrets stored as is, without any keys (e.g. GCP)
#   namespace - if specified then SecretStore is created, otherwise
#           ClusterSecretStore
#   refreshInterval - refresh interval in seconds (sic! - unlike in
#           externalSecrets refreshInterval, that comprised of number an unit)
secretStores:
  # Main (and, hopefully, only) external secret store
  secret-store:
    # Provider must be overridden
    structured: False
    provider: {}
    refreshInterval: 300

# Dictionary of external secrets.
# Intended use is single-property (single file/environment) secrets, albeit
# multifile/environment secrets may be established with empty 'property'
# Dictionary key (converted to RFC1123) used as name (key) of external secret
# and name of created secret. Special 'default' dictionary key denotes entry,
# holding common properties (to avoid their duplication in each secret
# definition - still they can be redefined there if needed)
# Properties are:
#  secretStore Name of secret store - key in 'secretStores' dictionary
#  refreshInterval Secret refresh interval (e.g. 1h), 0 to fetch once. Note
#          that in secretStores interval is an integer, expressed in seconds!
#  property Can be:
#    nonempty - top-level secret property (i.e. name of secret file or
#            environment variable)
#    empty - remote secret used verbatim
#    absent - corresponded ExternalSecret not created
#  template - Optional 'template' clause to insert to 'target'
#  data - Explicitly specified 'data' clause for complicated secrets
#  mountPath Directory to which secret is mounted
#  mountPathPrefix If 'mountPath' not defined it is constructed as
#          concatenation of this prefix and secret name
#  subPath SubPath clause (e.g. for mounting several secrets into same
#          directory)
#  structuredRemote - can be:
#    True If secrets in remote secret store have key-value form (e.g.
#            Kubernetes as External Secrets backend). For such stores
#            'property' (if nonempty) used to retrieve secret value from
#            external secret
#    False If values of secrets stored as is, without any keys (e.g. GCP)
#  remoteSecretName Name of remote secret (if different from this item's
#          key). Useful for several ExternalSecret manifests to share the same
#          external secret
#  remoteProperty Name of key in remote structured property, if different
#          from 'property'. Useful for several ExternalSecret manifests to
#          share the same external secret
externalSecrets:
  default:
    secretStore: secret-store
    refreshInterval: 5m
    mountPathPrefix: /secrets/
  postgres-password:
    property: POSTGRES_PASSWORD
  ratdb-password:
    property: RATDB_PASSWORD
  uls-state-db-password:
    property: ULS_STATE_DB_PASSWORD
  rcache-db-password:
    property: RCACHE_DB_PASSWORD
  als-db-password:
    property: ALS_DB_PASSWORD
  als-json-log-db-password:
    property: ALS_JSON_LOG_DB_PASSWORD
  image-pull:
    property: .dockerconfigjson
    template:
      type: kubernetes.io/dockerconfigjson
  flask-secret-key:
    property: SECRET_KEY
  google-apikey:
    property: GOOGLE_APIKEY
  ratapi-captcha-secret:
    property: CAPTCHA_SECRET
  ratapi-captcha-sitekey:
    property: CAPTCHA_SITEKEY
  ratapi-mail-password:
    property: MAIL_PASSWORD
  oidc-client-id:
    property: OIDC_CLIENT_ID
  oidc-client-secret:
    property: OIDC_CLIENT_SECRET
